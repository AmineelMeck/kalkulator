//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Date: 06 Jun 2020
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using NUnit.Framework;

namespace Kalk.Tests
{
    using Kalk.Core.Modules;
    using Kalk.Core;

    public partial class CsvModuleTests : KalkTestBase
    {
    }

    public partial class CurrencyModuleTests : KalkTestBase
    {
    }

    public partial class FileModuleTests : KalkTestBase
    {
    }

    public partial class KalkEngineTests : KalkTestBase
    {
    }

    public partial class MathModuleTests : KalkTestBase
    {
        /// <summary>
        /// Test for <see cref="M:Kalk.Core.MathModule.Fib(Kalk.Core.KalkIntValue)"/> or `fib`.
        /// </summary>
        [TestCase(@"fib 50", @"# fib(50)
out = 12586269025", Category = "Math Functions")]
        public static void Test_fib(string input, string output) => AssertScript(input, output);

        /// <summary>
        /// Test for <see cref="M:Kalk.Core.MathModule.ComplexNumber"/> or `i`.
        /// </summary>
        [TestCase(@"1 + 2i", @"# 1 + 2 * i
out = 1 + 2i", Category = "Math Functions")]
        public static void Test_i(string input, string output) => AssertScript(input, output);

        /// <summary>
        /// Test for <see cref="M:Kalk.Core.MathModule.All(System.Object)"/> or `all`.
        /// </summary>
        [TestCase(@"all(bool4(true, false, true, false))
all(bool4(true, true, true, true))
all([0,1,0,2])
all([1,1,1,1])", @"# all(bool4(true, false, true, false))
out = false
# all(bool4(true, true, true, true))
out = true
# all([0,1,0,2])
out = false
# all([1,1,1,1])
out = true", Category = "Math Functions")]
        public static void Test_all(string input, string output) => AssertScript(input, output);

        /// <summary>
        /// Test for <see cref="M:Kalk.Core.MathModule.Any(System.Object)"/> or `any`.
        /// </summary>
        [TestCase(@"any(bool4(true, false, true, false))
any(bool4(false, false, false, false))
any([0,1,0,2])
any([0,0,0,0])", @"# any(bool4(true, false, true, false))
out = true
# any(bool4(false, false, false, false))
out = false
# any([0,1,0,2])
out = true
# any([0,0,0,0])
out = false", Category = "Math Functions")]
        public static void Test_any(string input, string output) => AssertScript(input, output);

        /// <summary>
        /// Test for <see cref="M:Kalk.Core.MathModule.Abs(Kalk.Core.KalkCompositeValue)"/> or `abs`.
        /// </summary>
        [TestCase(@"abs(-1)
abs(float4(-1, 1, -2, -3))", @"# abs(-1)
out = 1
# abs(float4(-1, 1, -2, -3))
out = float4(1, 1, 2, 3)", Category = "Math Functions")]
        public static void Test_abs(string input, string output) => AssertScript(input, output);

        /// <summary>
        /// Test for <see cref="M:Kalk.Core.MathModule.Rnd(Kalk.Core.KalkCompositeValue)"/> or `rnd`.
        /// </summary>
        [TestCase(@"seed(0); rnd
rnd
rnd(float4)", @"# seed(0); rnd
out = 0.7262432699679598
# rnd
out = 0.8173253595909687
# rnd(float4)
out = float4(0.7680227, 0.5581612, 0.20603316, 0.5588848)", Category = "Math Functions")]
        public static void Test_rnd(string input, string output) => AssertScript(input, output);

        /// <summary>
        /// Test for <see cref="M:Kalk.Core.MathModule.Seed(System.Int32)"/> or `seed`.
        /// </summary>
        [TestCase(@"seed(0); rnd
seed(1); rnd", @"# seed(0); rnd
out = 0.7262432699679598
# seed(1); rnd
out = 0.24866858415709278", Category = "Math Functions")]
        public static void Test_seed(string input, string output) => AssertScript(input, output);

        /// <summary>
        /// Test for <see cref="M:Kalk.Core.MathModule.Modf(Kalk.Core.KalkCompositeValue)"/> or `modf`.
        /// </summary>
        [TestCase(@"modf(1.5)
modf(float2(-1.2, 3.4))", @"# modf(1.5)
out = [1, 0.5]
# modf(float2(-1.2, 3.4))
out = [float2(-1, 3), float2(-0.20000005, 0.4000001)]", Category = "Math Functions")]
        public static void Test_modf(string input, string output) => AssertScript(input, output);

    }

    public partial class MemoryModuleTests : KalkTestBase
    {
    }

    public partial class StringModuleTests : KalkTestBase
    {
    }

    public partial class VectorModuleTests : KalkTestBase
    {
    }

    public partial class WebModuleTests : KalkTestBase
    {
    }
}
