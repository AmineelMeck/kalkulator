//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Date: 30 May 2020
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;


namespace Kalk.Core.Modules
{
    public partial class CsvModule
    {
        protected override void RegisterFunctionsAuto()
        {
            RegisterFunction("parse_csv", (Func<string, bool, Scriban.Runtime.ScriptRange>)ParseCsv);
            RegisterFunction("load_csv", (Func<string, bool, Scriban.Runtime.ScriptRange>)LoadCsv);
            RegisterDocumentationAuto();
        }

        private void RegisterDocumentationAuto()
        {
            {
                var descriptor = Descriptors["parse_csv"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["load_csv"];
                descriptor.Category = "Misc File Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
        }        
    }
}
namespace Kalk.Core.Modules
{
    public partial class CurrencyModule
    {
        protected override void RegisterFunctionsAuto()
        {
            RegisterConstant("currencies", Currencies);
            RegisterFunction("currency", (Func<Scriban.Syntax.ScriptVariable, decimal?, Kalk.Core.KalkCurrency>)Currency);
            RegisterDocumentationAuto();
        }

        private void RegisterDocumentationAuto()
        {
            {
                var descriptor = Descriptors["currencies"];
                descriptor.Category = "Unit Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["currency"];
                descriptor.Category = "Unit Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
        }        
    }
}
namespace Kalk.Core.Modules
{
    public partial class FileModule
    {
        protected override void RegisterFunctionsAuto()
        {
            RegisterFunction("file_exists", (Func<string, Kalk.Core.KalkBool>)FileExists);
            RegisterFunction("directory_exists", (Func<string, Kalk.Core.KalkBool>)DirectoryExists);
            RegisterFunction("dir", (Func<string, bool, System.Collections.IEnumerable>)DirectoryListing);
            RegisterFunction("load_text", (Func<string, string, string>)LoadText);
            RegisterFunction("load_bytes", (Func<string, Kalk.Core.KalkNativeBuffer>)LoadBytes);
            RegisterFunction("load_lines", (Func<string, string, Scriban.Runtime.ScriptRange>)LoadLines);
            RegisterFunction("save_lines", (Func<System.Collections.IEnumerable, string, string, object>)SaveLines);
            RegisterFunction("save_text", (Func<string, string, string, object>)SaveText);
            RegisterFunction("save_bytes", (Func<System.Collections.IEnumerable, string, object>)SaveBytes);
            RegisterDocumentationAuto();
        }

        private void RegisterDocumentationAuto()
        {
            {
                var descriptor = Descriptors["file_exists"];
                descriptor.Category = "Misc File Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["directory_exists"];
                descriptor.Category = "Misc File Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["dir"];
                descriptor.Category = "Misc File Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["load_text"];
                descriptor.Category = "Misc File Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["load_bytes"];
                descriptor.Category = "Misc File Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["load_lines"];
                descriptor.Category = "Misc File Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["save_lines"];
                descriptor.Category = "Misc File Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["save_text"];
                descriptor.Category = "Misc File Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["save_bytes"];
                descriptor.Category = "Misc File Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
        }        
    }
}
namespace Kalk.Core
{
    public partial class KalkEngine
    {
        protected void RegisterFunctionsAuto()
        {
            RegisterConstant("config", Config);
            RegisterConstant("aliases", Aliases);
            RegisterConstant("units", Units);
            RegisterConstant("shortcuts", Shortcuts);
            RegisterFunction("clipboard", (Func<object, object>)Clipboard);
            RegisterAction("display", (Action<Scriban.Syntax.ScriptVariable>)Display);
            RegisterAction("echo", (Action<Scriban.Syntax.ScriptVariable>)Echo);
            RegisterAction("print", (Action<object>)Print);
            RegisterAction("printh", (Action<object>)Printh);
            RegisterAction("help", (Action<Scriban.Syntax.ScriptExpression>)Help);
            RegisterAction("reset", (Action)Reset);
            RegisterAction("version", (Action)Version);
            RegisterAction("list", (Action)List);
            RegisterAction("del", (Action<Scriban.Syntax.ScriptVariable>)DeleteVariable);
            RegisterAction("exit", (Action)Exit);
            RegisterAction("history", (Action<object>)History);
            RegisterFunction("eval", (Func<string, bool, object>)EvaluateText);
            RegisterFunction("load", (Func<string, bool, object>)LoadFile);
            RegisterAction("clear", (Action<Scriban.Syntax.ScriptExpression>)Clear);
            RegisterAction("cls", (Action)Cls);
            RegisterFunction("out", (Func<object>)Last);
            RegisterAction("out2clipboard", (Action)LastToClipboard);
            RegisterAction("shortcut", (Action<Scriban.Syntax.ScriptVariable, Scriban.Syntax.ScriptExpression[]>)Shortcut);
            RegisterAction("alias", (Action<Scriban.Syntax.ScriptVariable, Scriban.Syntax.ScriptVariable[]>)Alias);
            RegisterConstant("ascii", AsciiTable);
            RegisterFunction("keys", (Func<object, System.Collections.IEnumerable>)Keys);
            RegisterFunction("guid", (Func<string>)Guid);
            RegisterFunction("size", (Func<object, int>)Size);
            RegisterFunction("values", (Func<object, System.Collections.IEnumerable>)Values);
            RegisterFunction("hex", (Func<object, string, bool, object>)Hexadecimal);
            RegisterFunction("utf8", (Func<object, object>)GetUtf8);
            RegisterFunction("utf16", (Func<object, object>)GetUtf16);
            RegisterFunction("utf32", (Func<object, object>)GetUtf32);
            RegisterFunction("insert_at", (Func<object, int, object, object>)InsertAt);
            RegisterFunction("remove_at", (Func<object, int, object>)RemoveAt);
            RegisterFunction("contains", (Func<object, object, Kalk.Core.KalkBool>)Contains);
            RegisterFunction("replace", (Func<object, object, object, object>)Replace);
            RegisterFunction("slice", (Func<object, int, int?, object>)Slice);
            RegisterFunction("lines", (Func<string, Scriban.Runtime.ScriptRange>)Lines);
            RegisterFunction("to", (Func<Kalk.Core.KalkExpression, Kalk.Core.KalkExpression, Kalk.Core.KalkExpression>)ConvertTo);
            RegisterFunction("unit", (Func<Scriban.Syntax.ScriptVariable, string, Scriban.Syntax.ScriptVariable, Kalk.Core.KalkExpression, string, string, Kalk.Core.KalkExpression>)DefineUserUnit);
            RegisterDocumentationAuto();
        }

        private void RegisterDocumentationAuto()
        {
            {
                var descriptor = Descriptors["config"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["aliases"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["units"];
                descriptor.Category = "Unit Functions";
                descriptor.Description = @"If used in an expression, returns an object containing all units defined.
    Otherwise it will display units in a friendly format.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["shortcuts"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["clipboard"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["display"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = true;
            }
            {
                var descriptor = Descriptors["echo"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = true;
            }
            {
                var descriptor = Descriptors["print"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = true;
            }
            {
                var descriptor = Descriptors["printh"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = true;
            }
            {
                var descriptor = Descriptors["help"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = true;
                descriptor.Params.Add(new KalkParamDescriptor("expression", @"")  { IsOptional = true });
            }
            {
                var descriptor = Descriptors["reset"];
                descriptor.Category = "General";
                descriptor.Description = @"Clear all defined variables.";
                descriptor.IsCommand = true;
            }
            {
                var descriptor = Descriptors["version"];
                descriptor.Category = "General";
                descriptor.Description = @"Prints the version of kalk.";
                descriptor.IsCommand = true;
            }
            {
                var descriptor = Descriptors["list"];
                descriptor.Category = "General";
                descriptor.Description = @"Lists all user defined variables and functions.";
                descriptor.IsCommand = true;
            }
            {
                var descriptor = Descriptors["del"];
                descriptor.Category = "General";
                descriptor.Description = @"Deletes a user defined variable.";
                descriptor.IsCommand = true;
                descriptor.Params.Add(new KalkParamDescriptor("variable", @"Name of the variable to delete.")  { IsOptional = false });
            }
            {
                var descriptor = Descriptors["exit"];
                descriptor.Category = "General";
                descriptor.Description = @"Exit kalk.";
                descriptor.IsCommand = true;
            }
            {
                var descriptor = Descriptors["history"];
                descriptor.Category = "General";
                descriptor.Description = @"Displays the command history.";
                descriptor.IsCommand = true;
                descriptor.Params.Add(new KalkParamDescriptor("line", @"An optional parameter that indicates:
    
     - if it is >= 0, the index of the history command to re-run. (e.g `history 1` to re-run the command 1 in the history)
     - if it is < 0, how many recent lines to display. (e.g `history -3` would display the last 3 lines in the history)")  { IsOptional = true });
            }
            {
                var descriptor = Descriptors["eval"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["load"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["clear"];
                descriptor.Category = "General";
                descriptor.Description = @"Clears the screen (by default) or the history (e.g clear history).";
                descriptor.IsCommand = true;
                descriptor.Params.Add(new KalkParamDescriptor("what", @"An optional argument specifying what to clear. Can be of the following value:
    * screen: to clear the screen (default if not passed)
    * history: to clear the history")  { IsOptional = true });
            }
            {
                var descriptor = Descriptors["cls"];
                descriptor.Category = "General";
                descriptor.Description = @"Clears the screen.";
                descriptor.IsCommand = true;
            }
            {
                var descriptor = Descriptors["out"];
                descriptor.Category = "General";
                descriptor.Description = @"Returns the last evaluated result.";
                descriptor.IsCommand = false;
                descriptor.Returns = @"The last evaluated result as an object.";
            }
            {
                var descriptor = Descriptors["out2clipboard"];
                descriptor.Category = "General";
                descriptor.Description = @"Copies the last evaluated content to the clipboard.
    
     This is equivalent to `out |> clipboard`.";
                descriptor.IsCommand = true;
            }
            {
                var descriptor = Descriptors["shortcut"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = true;
            }
            {
                var descriptor = Descriptors["alias"];
                descriptor.Category = "General";
                descriptor.Description = @"";
                descriptor.IsCommand = true;
            }
            {
                var descriptor = Descriptors["ascii"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"Returns the ascii table or print";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["keys"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["guid"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["size"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["values"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["hex"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["utf8"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["utf16"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["utf32"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["insert_at"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["remove_at"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["contains"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["replace"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["slice"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["lines"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["to"];
                descriptor.Category = "Unit Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["unit"];
                descriptor.Category = "Unit Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
        }        
    }
}
namespace Kalk.Core
{
    public partial class MathModule
    {
        protected override void RegisterFunctionsAuto()
        {
            RegisterConstant("nan", Nan);
            RegisterConstant("inf", Inf);
            RegisterConstant("pi", Pi);
            RegisterConstant("e", E);
            RegisterFunction("fib", (Func<Kalk.Core.KalkIntValue, object>)Fib);
            RegisterFunction("i", (Func<object>)ComplexNumber);
            RegisterFunction("all", (Func<object, Kalk.Core.KalkBool>)All);
            RegisterFunction("any", (Func<object, Kalk.Core.KalkBool>)Any);
            RegisterFunction("abs", (Func<Kalk.Core.KalkCompositeValue, object>)Abs);
            RegisterFunction("rnd", (Func<Kalk.Core.KalkCompositeValue, object>)Rnd);
            RegisterFunction("sign", (Func<Kalk.Core.KalkCompositeValue, object>)Sign);
            RegisterFunction("cos", (Func<Kalk.Core.KalkDoubleValue, object>)Cos);
            RegisterFunction("acos", (Func<Kalk.Core.KalkDoubleValue, object>)Acos);
            RegisterFunction("cosh", (Func<Kalk.Core.KalkDoubleValue, object>)Cosh);
            RegisterFunction("acosh", (Func<Kalk.Core.KalkDoubleValue, object>)Acosh);
            RegisterFunction("sin", (Func<Kalk.Core.KalkDoubleValue, object>)Sin);
            RegisterFunction("asin", (Func<Kalk.Core.KalkDoubleValue, object>)Asin);
            RegisterFunction("sinh", (Func<Kalk.Core.KalkDoubleValue, object>)Sinh);
            RegisterFunction("asinh", (Func<Kalk.Core.KalkDoubleValue, object>)Asinh);
            RegisterFunction("fmod", (Func<Kalk.Core.KalkDoubleValue, Kalk.Core.KalkDoubleValue, object>)Fmod);
            RegisterFunction("frac", (Func<Kalk.Core.KalkDoubleValue, object>)Frac);
            RegisterFunction("tan", (Func<Kalk.Core.KalkDoubleValue, object>)Tan);
            RegisterFunction("atan", (Func<Kalk.Core.KalkDoubleValue, object>)Atan);
            RegisterFunction("tanh", (Func<Kalk.Core.KalkDoubleValue, object>)Tanh);
            RegisterFunction("atanh", (Func<Kalk.Core.KalkDoubleValue, object>)Atanh);
            RegisterFunction("atan2", (Func<Kalk.Core.KalkDoubleValue, Kalk.Core.KalkDoubleValue, object>)Atan2);
            RegisterFunction("rsqrt", (Func<Kalk.Core.KalkDoubleValue, object>)Rsqrt);
            RegisterFunction("sqrt", (Func<Kalk.Core.KalkDoubleValue, object>)Sqrt);
            RegisterFunction("log", (Func<Kalk.Core.KalkDoubleValue, object>)Log);
            RegisterFunction("log2", (Func<Kalk.Core.KalkDoubleValue, object>)Log2);
            RegisterFunction("log10", (Func<Kalk.Core.KalkDoubleValue, object>)Log10);
            RegisterFunction("exp", (Func<Kalk.Core.KalkDoubleValue, object>)Exp);
            RegisterFunction("exp2", (Func<Kalk.Core.KalkDoubleValue, object>)Exp2);
            RegisterFunction("pow", (Func<Kalk.Core.KalkDoubleValue, Kalk.Core.KalkDoubleValue, object>)Pow);
            RegisterFunction("round", (Func<Kalk.Core.KalkDoubleValue, object>)Round);
            RegisterFunction("floor", (Func<Kalk.Core.KalkDoubleValue, object>)Floor);
            RegisterFunction("ceil", (Func<Kalk.Core.KalkDoubleValue, object>)Ceiling);
            RegisterFunction("trunc", (Func<Kalk.Core.KalkDoubleValue, object>)Trunc);
            RegisterFunction("saturate", (Func<Kalk.Core.KalkDoubleValue, object>)Saturate);
            RegisterFunction("min", (Func<Kalk.Core.KalkDoubleValue, Kalk.Core.KalkDoubleValue, object>)Min);
            RegisterFunction("max", (Func<Kalk.Core.KalkDoubleValue, Kalk.Core.KalkDoubleValue, object>)Max);
            RegisterFunction("step", (Func<Kalk.Core.KalkDoubleValue, Kalk.Core.KalkDoubleValue, object>)Step);
            RegisterFunction("smoothstep", (Func<Kalk.Core.KalkDoubleValue, Kalk.Core.KalkDoubleValue, Kalk.Core.KalkDoubleValue, object>)Smoothstep);
            RegisterFunction("lerp", (Func<Kalk.Core.KalkDoubleValue, Kalk.Core.KalkDoubleValue, Kalk.Core.KalkDoubleValue, object>)Lerp);
            RegisterFunction("isfinite", (Func<Kalk.Core.KalkCompositeValue, object>)IsFinite);
            RegisterFunction("isinf", (Func<Kalk.Core.KalkCompositeValue, object>)IsInf);
            RegisterFunction("isnan", (Func<Kalk.Core.KalkCompositeValue, object>)IsNan);
            RegisterFunction("sum", (Func<object, object[], object>)Sum);
            RegisterDocumentationAuto();
        }

        private void RegisterDocumentationAuto()
        {
            {
                var descriptor = Descriptors["nan"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"Defines the ""Not a Number"" constant for a double.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["inf"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"Defines the infinity constant for a double.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["pi"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"Defines the PI constant. pi = 3.14159265358979";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["e"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"Defines the natural logarithmic base. e = 2.71828182845905";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["fib"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["i"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["all"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["any"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["abs"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"Returns the absolute value of the specified value.";
                descriptor.IsCommand = false;
                descriptor.Params.Add(new KalkParamDescriptor("x", @"The specified value.")  { IsOptional = false });
                descriptor.Returns = @"The absolute value of the x parameter.";
            }
            {
                var descriptor = Descriptors["rnd"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"Returns a random value.";
                descriptor.IsCommand = false;
                descriptor.Params.Add(new KalkParamDescriptor("x", @"A value to create random values for.")  { IsOptional = true });
                descriptor.Returns = @"A random value or a random value of the x parameter.";
            }
            {
                var descriptor = Descriptors["sign"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"Returns an integer that indicates the sign of a number.";
                descriptor.IsCommand = false;
                descriptor.Params.Add(new KalkParamDescriptor("x", @"A signed number.")  { IsOptional = false });
                descriptor.Returns = @"A number that indicates the sign of x:
     - -1 if x is less than zero
     - 0 if x is equal to zero
     - 1 if x is greater than zero.";
            }
            {
                var descriptor = Descriptors["cos"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["acos"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["cosh"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["acosh"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["sin"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["asin"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["sinh"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["asinh"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["fmod"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["frac"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["tan"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["atan"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["tanh"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["atanh"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["atan2"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["rsqrt"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["sqrt"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["log"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["log2"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["log10"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["exp"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["exp2"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["pow"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["round"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["floor"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["ceil"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["trunc"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["saturate"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["min"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["max"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["step"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["smoothstep"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["lerp"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["isfinite"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["isinf"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["isnan"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["sum"];
                descriptor.Category = "Math Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
        }        
    }
}
namespace Kalk.Core.Modules
{
    public partial class MemoryModule
    {
        protected override void RegisterFunctionsAuto()
        {
            RegisterFunction("malloc", (Func<int, Kalk.Core.KalkNativeBuffer>)Malloc);
            RegisterFunction("bitcast", (Func<object, object, object>)Bitcast);
            RegisterFunction("asbytes", (Func<object, Kalk.Core.KalkNativeBuffer>)AsBytes);
            RegisterFunction("asdouble", (Func<object, double>)AsDouble);
            RegisterFunction("asfloat", (Func<object, float>)AsFloat);
            RegisterFunction("aslong", (Func<object, long>)AsLong);
            RegisterFunction("asulong", (Func<object, ulong>)AsULong);
            RegisterFunction("asint", (Func<object, int>)AsInt);
            RegisterFunction("asuint", (Func<object, uint>)AsUInt);
            RegisterFunction("bytebuffer", (Func<object, Kalk.Core.KalkNativeBuffer>)ByteBuffer);
            RegisterDocumentationAuto();
        }

        private void RegisterDocumentationAuto()
        {
            {
                var descriptor = Descriptors["malloc"];
                descriptor.Category = "Misc Memory Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bitcast"];
                descriptor.Category = "Misc Memory Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["asbytes"];
                descriptor.Category = "Misc Memory Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["asdouble"];
                descriptor.Category = "Misc Memory Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["asfloat"];
                descriptor.Category = "Misc Memory Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["aslong"];
                descriptor.Category = "Misc Memory Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["asulong"];
                descriptor.Category = "Misc Memory Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["asint"];
                descriptor.Category = "Misc Memory Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["asuint"];
                descriptor.Category = "Misc Memory Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bytebuffer"];
                descriptor.Category = "Misc Memory Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
        }        
    }
}
namespace Kalk.Core.Modules
{
    public partial class StringModule
    {
        protected override void RegisterFunctionsAuto()
        {
            RegisterFunction("escape", (Func<string, string>)StringEscape);
            RegisterFunction("capitalize", (Func<string, string>)StringCapitalize);
            RegisterFunction("capitalize_words", (Func<string, string>)StringCapitalizeWords);
            RegisterFunction("downcase", (Func<string, string>)StringDowncase);
            RegisterFunction("upcase", (Func<string, string>)StringUpcase);
            RegisterFunction("endswith", (Func<string, string, Kalk.Core.KalkBool>)StringEndsWith);
            RegisterFunction("handleize", (Func<string, string>)StringHandleize);
            RegisterFunction("lstrip", (Func<string, string>)StringLeftStrip);
            RegisterFunction("pluralize", (Func<int, string, string, string>)StringPluralize);
            RegisterFunction("rstrip", (Func<string, string>)StringRightStrip);
            RegisterFunction("split", (Func<string, string, System.Collections.IEnumerable>)StringSplit);
            RegisterFunction("startswith", (Func<string, string, Kalk.Core.KalkBool>)StringStartsWith);
            RegisterFunction("strip", (Func<string, string>)StringStrip);
            RegisterFunction("strip_newlines", (Func<string, string>)StringStripNewlines);
            RegisterFunction("pad_left", (Func<string, int, string>)StringPadLeft);
            RegisterFunction("pad_right", (Func<string, int, string>)StringPadRight);
            RegisterFunction("regex_escape", (Func<string, string>)RegexEscape);
            RegisterFunction("regex_match", (Func<string, string, string, Scriban.Runtime.ScriptArray>)RegexMatch);
            RegisterFunction("regex_matches", (Func<string, string, string, Scriban.Runtime.ScriptArray>)RegexMatches);
            RegisterFunction("regex_replace", (Func<string, string, string, string, string>)RegexReplace);
            RegisterFunction("regex_split", (Func<string, string, string, Scriban.Runtime.ScriptArray>)RegexSplit);
            RegisterFunction("regex_unescape", (Func<string, string>)RegexUnescape);
            RegisterDocumentationAuto();
        }

        private void RegisterDocumentationAuto()
        {
            {
                var descriptor = Descriptors["escape"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["capitalize"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["capitalize_words"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["downcase"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["upcase"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["endswith"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["handleize"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["lstrip"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["pluralize"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["rstrip"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["split"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["startswith"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["strip"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["strip_newlines"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["pad_left"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["pad_right"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["regex_escape"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["regex_match"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["regex_matches"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["regex_replace"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["regex_split"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["regex_unescape"];
                descriptor.Category = "Text Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
        }        
    }
}
namespace Kalk.Core.Modules
{
    public partial class VectorModule
    {
        protected override void RegisterFunctionsAuto()
        {
            RegisterFunction("length", (Func<object, object>)Length);
            RegisterFunction("dot", (Func<Kalk.Core.KalkVector, Kalk.Core.KalkVector, object>)Dot);
            RegisterFunction("cross", (Func<Kalk.Core.KalkVector, Kalk.Core.KalkVector, object>)Cross);
            RegisterFunction("byte", (Func<object, byte>)CreateByte);
            RegisterFunction("sbyte", (Func<object, sbyte>)CreateSByte);
            RegisterFunction("short", (Func<object, short>)CreateShort);
            RegisterFunction("ushort", (Func<object, ushort>)CreateUShort);
            RegisterFunction("uint", (Func<object, uint>)CreateUInt);
            RegisterFunction("int", (Func<object, int>)CreateInt);
            RegisterFunction("ulong", (Func<object, ulong>)CreateULong);
            RegisterFunction("long", (Func<object, long>)CreateLong);
            RegisterFunction("bool", (Func<object, Kalk.Core.KalkBool>)CreateBool);
            RegisterFunction("float", (Func<object, float>)CreateFloat);
            RegisterFunction("double", (Func<object, double>)CreateDouble);
            RegisterFunction("byte16", (Func<object[], Kalk.Core.KalkVector<byte>>)CreateByte16);
            RegisterFunction("byte32", (Func<object[], Kalk.Core.KalkVector<byte>>)CreateByte32);
            RegisterFunction("byte64", (Func<object[], Kalk.Core.KalkVector<byte>>)CreateByte64);
            RegisterFunction("sbyte16", (Func<object[], Kalk.Core.KalkVector<sbyte>>)CreateSByte16);
            RegisterFunction("sbyte32", (Func<object[], Kalk.Core.KalkVector<sbyte>>)CreateSByte32);
            RegisterFunction("sbyte64", (Func<object[], Kalk.Core.KalkVector<sbyte>>)CreateSByte64);
            RegisterFunction("short2", (Func<object[], Kalk.Core.KalkVector<short>>)CreateShort2);
            RegisterFunction("short4", (Func<object[], Kalk.Core.KalkVector<short>>)CreateShort4);
            RegisterFunction("short8", (Func<object[], Kalk.Core.KalkVector<short>>)CreateShort8);
            RegisterFunction("short16", (Func<object[], Kalk.Core.KalkVector<short>>)CreateShort16);
            RegisterFunction("short32", (Func<object[], Kalk.Core.KalkVector<short>>)CreateShort32);
            RegisterFunction("ushort2", (Func<object[], Kalk.Core.KalkVector<ushort>>)CreateUShort2);
            RegisterFunction("ushort4", (Func<object[], Kalk.Core.KalkVector<ushort>>)CreateUShort4);
            RegisterFunction("ushort8", (Func<object[], Kalk.Core.KalkVector<ushort>>)CreateUShort8);
            RegisterFunction("ushort16", (Func<object[], Kalk.Core.KalkVector<ushort>>)CreateUShort16);
            RegisterFunction("ushort32", (Func<object[], Kalk.Core.KalkVector<ushort>>)CreateUShort32);
            RegisterFunction("int2", (Func<object[], Kalk.Core.KalkVector<int>>)CreateInt2);
            RegisterFunction("int3", (Func<object[], Kalk.Core.KalkVector<int>>)CreateInt3);
            RegisterFunction("int4", (Func<object[], Kalk.Core.KalkVector<int>>)CreateInt4);
            RegisterFunction("int8", (Func<object[], Kalk.Core.KalkVector<int>>)CreateInt8);
            RegisterFunction("int16", (Func<object[], Kalk.Core.KalkVector<int>>)CreateInt16);
            RegisterFunction("uint2", (Func<object[], Kalk.Core.KalkVector<uint>>)CreateUInt2);
            RegisterFunction("uint3", (Func<object[], Kalk.Core.KalkVector<uint>>)CreateUInt3);
            RegisterFunction("uint4", (Func<object[], Kalk.Core.KalkVector<uint>>)CreateUInt4);
            RegisterFunction("uint8", (Func<object[], Kalk.Core.KalkVector<uint>>)CreateUInt8);
            RegisterFunction("uint16", (Func<object[], Kalk.Core.KalkVector<uint>>)CreateUInt16);
            RegisterFunction("long2", (Func<object[], Kalk.Core.KalkVector<long>>)CreateLong2);
            RegisterFunction("long3", (Func<object[], Kalk.Core.KalkVector<long>>)CreateLong3);
            RegisterFunction("long4", (Func<object[], Kalk.Core.KalkVector<long>>)CreateLong4);
            RegisterFunction("long8", (Func<object[], Kalk.Core.KalkVector<long>>)CreateLong8);
            RegisterFunction("ulong2", (Func<object[], Kalk.Core.KalkVector<ulong>>)CreateULong2);
            RegisterFunction("ulong3", (Func<object[], Kalk.Core.KalkVector<ulong>>)CreateULong3);
            RegisterFunction("ulong4", (Func<object[], Kalk.Core.KalkVector<ulong>>)CreateULong4);
            RegisterFunction("ulong8", (Func<object[], Kalk.Core.KalkVector<ulong>>)CreateULong8);
            RegisterFunction("bool2", (Func<object[], Kalk.Core.KalkVector<Kalk.Core.KalkBool>>)CreateBool2);
            RegisterFunction("bool3", (Func<object[], Kalk.Core.KalkVector<Kalk.Core.KalkBool>>)CreateBool3);
            RegisterFunction("bool4", (Func<object[], Kalk.Core.KalkVector<Kalk.Core.KalkBool>>)CreateBool4);
            RegisterFunction("bool8", (Func<object[], Kalk.Core.KalkVector<Kalk.Core.KalkBool>>)CreateBool8);
            RegisterFunction("bool16", (Func<object[], Kalk.Core.KalkVector<Kalk.Core.KalkBool>>)CreateBool16);
            RegisterFunction("float2", (Func<object[], Kalk.Core.KalkVector<float>>)CreateFloat2);
            RegisterFunction("float3", (Func<object[], Kalk.Core.KalkVector<float>>)CreateFloat3);
            RegisterFunction("float4", (Func<object[], Kalk.Core.KalkVector<float>>)CreateFloat4);
            RegisterFunction("float8", (Func<object[], Kalk.Core.KalkVector<float>>)CreateFloat8);
            RegisterFunction("float16", (Func<object[], Kalk.Core.KalkVector<float>>)CreateFloat16);
            RegisterFunction("double2", (Func<object[], Kalk.Core.KalkVector<double>>)CreateDouble2);
            RegisterFunction("double3", (Func<object[], Kalk.Core.KalkVector<double>>)CreateDouble3);
            RegisterFunction("double4", (Func<object[], Kalk.Core.KalkVector<double>>)CreateDouble4);
            RegisterFunction("double8", (Func<object[], Kalk.Core.KalkVector<double>>)CreateDouble8);
            RegisterFunction("vector", (Func<Scriban.Syntax.ScriptVariable, int, object[], object>)CreateVector);
            RegisterFunction("rgb", (Func<object[], Kalk.Core.KalkColorRgb>)CreateRgb);
            RegisterFunction("rgba", (Func<object[], Kalk.Core.KalkColorRgba>)CreateRgba);
            RegisterFunction("colors", (Func<object>)Colors);
            RegisterFunction("bool2x2", (Func<object[], Kalk.Core.KalkMatrix<Kalk.Core.KalkBool>>)CreateBool2x2);
            RegisterFunction("bool2x3", (Func<object[], Kalk.Core.KalkMatrix<Kalk.Core.KalkBool>>)CreateBool2x3);
            RegisterFunction("bool2x4", (Func<object[], Kalk.Core.KalkMatrix<Kalk.Core.KalkBool>>)CreateBool2x4);
            RegisterFunction("bool3x2", (Func<object[], Kalk.Core.KalkMatrix<Kalk.Core.KalkBool>>)CreateBool3x2);
            RegisterFunction("bool3x3", (Func<object[], Kalk.Core.KalkMatrix<Kalk.Core.KalkBool>>)CreateBool3x3);
            RegisterFunction("bool3x4", (Func<object[], Kalk.Core.KalkMatrix<Kalk.Core.KalkBool>>)CreateBool3x4);
            RegisterFunction("bool4x2", (Func<object[], Kalk.Core.KalkMatrix<Kalk.Core.KalkBool>>)CreateBool4x2);
            RegisterFunction("bool4x3", (Func<object[], Kalk.Core.KalkMatrix<Kalk.Core.KalkBool>>)CreateBool4x3);
            RegisterFunction("bool4x4", (Func<object[], Kalk.Core.KalkMatrix<Kalk.Core.KalkBool>>)CreateBool4x4);
            RegisterFunction("int2x2", (Func<object[], Kalk.Core.KalkMatrix<int>>)CreateInt2x2);
            RegisterFunction("int2x3", (Func<object[], Kalk.Core.KalkMatrix<int>>)CreateInt2x3);
            RegisterFunction("int2x4", (Func<object[], Kalk.Core.KalkMatrix<int>>)CreateInt2x4);
            RegisterFunction("int3x2", (Func<object[], Kalk.Core.KalkMatrix<int>>)CreateInt3x2);
            RegisterFunction("int3x3", (Func<object[], Kalk.Core.KalkMatrix<int>>)CreateInt3x3);
            RegisterFunction("int3x4", (Func<object[], Kalk.Core.KalkMatrix<int>>)CreateInt3x4);
            RegisterFunction("int4x2", (Func<object[], Kalk.Core.KalkMatrix<int>>)CreateInt4x2);
            RegisterFunction("int4x3", (Func<object[], Kalk.Core.KalkMatrix<int>>)CreateInt4x3);
            RegisterFunction("int4x4", (Func<object[], Kalk.Core.KalkMatrix<int>>)CreateInt4x4);
            RegisterFunction("float2x2", (Func<object[], Kalk.Core.KalkMatrix<float>>)CreateFloat2x2);
            RegisterFunction("float2x3", (Func<object[], Kalk.Core.KalkMatrix<float>>)CreateFloat2x3);
            RegisterFunction("float2x4", (Func<object[], Kalk.Core.KalkMatrix<float>>)CreateFloat2x4);
            RegisterFunction("float3x2", (Func<object[], Kalk.Core.KalkMatrix<float>>)CreateFloat3x2);
            RegisterFunction("float3x3", (Func<object[], Kalk.Core.KalkMatrix<float>>)CreateFloat3x3);
            RegisterFunction("float3x4", (Func<object[], Kalk.Core.KalkMatrix<float>>)CreateFloat3x4);
            RegisterFunction("float4x2", (Func<object[], Kalk.Core.KalkMatrix<float>>)CreateFloat4x2);
            RegisterFunction("float4x3", (Func<object[], Kalk.Core.KalkMatrix<float>>)CreateFloat4x3);
            RegisterFunction("float4x4", (Func<object[], Kalk.Core.KalkMatrix<float>>)CreateFloat4x4);
            RegisterFunction("double2x2", (Func<object[], Kalk.Core.KalkMatrix<double>>)CreateDouble2x2);
            RegisterFunction("double2x3", (Func<object[], Kalk.Core.KalkMatrix<double>>)CreateDouble2x3);
            RegisterFunction("double2x4", (Func<object[], Kalk.Core.KalkMatrix<double>>)CreateDouble2x4);
            RegisterFunction("double3x2", (Func<object[], Kalk.Core.KalkMatrix<double>>)CreateDouble3x2);
            RegisterFunction("double3x3", (Func<object[], Kalk.Core.KalkMatrix<double>>)CreateDouble3x3);
            RegisterFunction("double3x4", (Func<object[], Kalk.Core.KalkMatrix<double>>)CreateDouble3x4);
            RegisterFunction("double4x2", (Func<object[], Kalk.Core.KalkMatrix<double>>)CreateDouble4x2);
            RegisterFunction("double4x3", (Func<object[], Kalk.Core.KalkMatrix<double>>)CreateDouble4x3);
            RegisterFunction("double4x4", (Func<object[], Kalk.Core.KalkMatrix<double>>)CreateDouble4x4);
            RegisterFunction("transpose", (Func<Kalk.Core.KalkMatrix, Kalk.Core.KalkMatrix>)Transpose);
            RegisterFunction("identity", (Func<Kalk.Core.KalkMatrix, Kalk.Core.KalkMatrix>)Identity);
            RegisterFunction("determinant", (Func<Kalk.Core.KalkMatrix, object>)Determinant);
            RegisterFunction("inverse", (Func<Kalk.Core.KalkMatrix, Kalk.Core.KalkMatrix>)Inverse);
            RegisterFunction("diag", (Func<object, object>)Diagonal);
            RegisterFunction("matrix", (Func<Scriban.Syntax.ScriptVariable, int, int, object[], object>)CreateMatrix);
            RegisterFunction("row", (Func<Kalk.Core.KalkMatrix, int, Kalk.Core.KalkVector>)GetRow);
            RegisterFunction("col", (Func<Kalk.Core.KalkMatrix, int, Kalk.Core.KalkVector>)GetColumn);
            RegisterFunction("mul", (Func<object, object, object>)Multiply);
            RegisterDocumentationAuto();
        }

        private void RegisterDocumentationAuto()
        {
            {
                var descriptor = Descriptors["length"];
                descriptor.Category = "Math Vector/Matrix Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["dot"];
                descriptor.Category = "Math Vector/Matrix Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["cross"];
                descriptor.Category = "Math Vector/Matrix Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["byte"];
                descriptor.Category = "Type Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["sbyte"];
                descriptor.Category = "Type Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["short"];
                descriptor.Category = "Type Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["ushort"];
                descriptor.Category = "Type Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["uint"];
                descriptor.Category = "Type Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int"];
                descriptor.Category = "Type Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["ulong"];
                descriptor.Category = "Type Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["long"];
                descriptor.Category = "Type Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool"];
                descriptor.Category = "Type Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float"];
                descriptor.Category = "Type Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double"];
                descriptor.Category = "Type Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["byte16"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["byte32"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["byte64"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["sbyte16"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["sbyte32"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["sbyte64"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["short2"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["short4"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["short8"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["short16"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["short32"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["ushort2"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["ushort4"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["ushort8"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["ushort16"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["ushort32"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int2"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int3"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int4"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int8"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int16"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["uint2"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["uint3"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["uint4"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["uint8"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["uint16"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["long2"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["long3"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["long4"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["long8"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["ulong2"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["ulong3"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["ulong4"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["ulong8"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool2"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool3"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool4"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool8"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool16"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float2"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float3"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float4"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float8"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float16"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double2"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double3"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double4"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double8"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["vector"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["rgb"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["rgba"];
                descriptor.Category = "Type Vector Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["colors"];
                descriptor.Category = "Misc Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool2x2"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 2 (rows) x 2 (columns) matrix of bool.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool2x3"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 2 (rows) x 3 (columns) matrix of bool.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool2x4"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 2 (rows) x 4 (columns) matrix of bool.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool3x2"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 3 (rows) x 2 (columns) matrix of bool.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool3x3"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 3 (rows) x 3 (columns) matrix of bool.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool3x4"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 3 (rows) x 4 (columns) matrix of bool.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool4x2"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 4 (rows) x 2 (columns) matrix of bool.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool4x3"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 4 (rows) x 3 (columns) matrix of bool.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["bool4x4"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 4 (rows) x 4 (columns) matrix of bool.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int2x2"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 2 (rows) x 2 (columns) matrix of int.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int2x3"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 2 (rows) x 3 (columns) matrix of int.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int2x4"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 2 (rows) x 4 (columns) matrix of int.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int3x2"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 3 (rows) x 2 (columns) matrix of int.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int3x3"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 3 (rows) x 3 (columns) matrix of int.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int3x4"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 3 (rows) x 4 (columns) matrix of int.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int4x2"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 4 (rows) x 2 (columns) matrix of int.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int4x3"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 4 (rows) x 3 (columns) matrix of int.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["int4x4"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 4 (rows) x 4 (columns) matrix of int.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float2x2"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 2 (rows) x 2 (columns) matrix of float.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float2x3"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 2 (rows) x 3 (columns) matrix of float.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float2x4"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 2 (rows) x 4 (columns) matrix of float.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float3x2"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 3 (rows) x 2 (columns) matrix of float.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float3x3"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 3 (rows) x 3 (columns) matrix of float.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float3x4"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 3 (rows) x 4 (columns) matrix of float.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float4x2"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 4 (rows) x 2 (columns) matrix of float.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float4x3"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 4 (rows) x 3 (columns) matrix of float.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["float4x4"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 4 (rows) x 4 (columns) matrix of float.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double2x2"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 2 (rows) x 2 (columns) matrix of double.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double2x3"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 2 (rows) x 3 (columns) matrix of double.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double2x4"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 2 (rows) x 4 (columns) matrix of double.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double3x2"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 3 (rows) x 2 (columns) matrix of double.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double3x3"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 3 (rows) x 3 (columns) matrix of double.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double3x4"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 3 (rows) x 4 (columns) matrix of double.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double4x2"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 4 (rows) x 2 (columns) matrix of double.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double4x3"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 4 (rows) x 3 (columns) matrix of double.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["double4x4"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"Creates a 4 (rows) x 4 (columns) matrix of double.";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["transpose"];
                descriptor.Category = "Math Vector/Matrix Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["identity"];
                descriptor.Category = "Math Vector/Matrix Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["determinant"];
                descriptor.Category = "Math Vector/Matrix Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["inverse"];
                descriptor.Category = "Math Vector/Matrix Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["diag"];
                descriptor.Category = "Math Vector/Matrix Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["matrix"];
                descriptor.Category = "Type Matrix Constructors";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["row"];
                descriptor.Category = "Math Vector/Matrix Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["col"];
                descriptor.Category = "Math Vector/Matrix Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["mul"];
                descriptor.Category = "Math Vector/Matrix Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
        }        
    }
}
namespace Kalk.Core.Modules
{
    public partial class WebModule
    {
        protected override void RegisterFunctionsAuto()
        {
            RegisterFunction("url_encode", (Func<string, string>)UrlEncode);
            RegisterFunction("url_decode", (Func<string, string>)UrlDecode);
            RegisterFunction("url_escape", (Func<string, string>)UrlEscape);
            RegisterFunction("html_encode", (Func<string, string>)HtmlEncode);
            RegisterFunction("html_decode", (Func<string, string>)HtmlDecode);
            RegisterFunction("html_strip", (Func<string, string>)HtmlStrip);
            RegisterFunction("wget", (Func<string, object>)WebGet);
            RegisterDocumentationAuto();
        }

        private void RegisterDocumentationAuto()
        {
            {
                var descriptor = Descriptors["url_encode"];
                descriptor.Category = "Web & Html Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["url_decode"];
                descriptor.Category = "Web & Html Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["url_escape"];
                descriptor.Category = "Web & Html Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["html_encode"];
                descriptor.Category = "Web & Html Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["html_decode"];
                descriptor.Category = "Web & Html Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["html_strip"];
                descriptor.Category = "Web & Html Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
            {
                var descriptor = Descriptors["wget"];
                descriptor.Category = "Web & Html Functions";
                descriptor.Description = @"";
                descriptor.IsCommand = false;
            }
        }        
    }
}
