<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<# 
    var types = new List<(string, string, int, int, string)>();

    foreach(var typeU in new string[] { "Bool", "Int", "Float", "Double" })
    {
        var type = typeU.ToLowerInvariant();
        for(int y = 2; y <= 4; y++) {
            for(int x = 2; x <= 4; x++) {
                var genericType = typeU == "Bool" ? "KalkBool" : type;
                types.Add((type, $"{typeU}{y}x{x}", y, x, genericType));
            }
        }
    }
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Date: <#= DateTime.Now #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Scriban.Helpers;
using Scriban.Syntax;

namespace Kalk.Core.Modules
{
    public partial class VectorModule
    {
        private const string CategoryMatrixConstructors = "Type Matrix Constructors";

<# foreach(var type in types) { #>
        private static readonly KalkMatrixConstructor<<#= type.Item5 #>> <#= type.Item2 #>Constructor = new KalkMatrixConstructor<<#= type.Item5 #>>(<#= type.Item3 #>, <#= type.Item4 #>);
<# } #>

<# foreach(var type in types) { #>
        /// <summary>Creates a <#= type.Item3 #> (rows) x <#= type.Item4 #> (columns) matrix of <#= type.Item1 #>.</summary>
        [KalkDoc("<#= type.Item2.ToLowerInvariant() #>", CategoryMatrixConstructors)]
        public KalkMatrix<<#= type.Item5 #>> Create<#= type.Item2 #>(params object[] arguments) => <#= type.Item2 #>Constructor.Invoke(Engine, arguments);
<# } #>
    }
}
