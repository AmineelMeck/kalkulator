//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Date: 12/04/2020 06:09:04
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Scriban.Helpers;
using Scriban.Syntax;

namespace Kalk.Core.Modules
{
    public partial class TypesModule
    {
        private const string CategoryMatrixConstructors = "Type Matrix Constructors";

        
        private static readonly KalkVectorConstructor<byte> Byte16Constructor = new KalkVectorConstructor<byte>(16);
        
        private static readonly KalkVectorConstructor<byte> Byte32Constructor = new KalkVectorConstructor<byte>(32);
        
        private static readonly KalkVectorConstructor<byte> Byte64Constructor = new KalkVectorConstructor<byte>(64);
            
        private static readonly KalkVectorConstructor<sbyte> SByte16Constructor = new KalkVectorConstructor<sbyte>(16);
        
        private static readonly KalkVectorConstructor<sbyte> SByte32Constructor = new KalkVectorConstructor<sbyte>(32);
        
        private static readonly KalkVectorConstructor<sbyte> SByte64Constructor = new KalkVectorConstructor<sbyte>(64);
            
        private static readonly KalkVectorConstructor<short> Short2Constructor = new KalkVectorConstructor<short>(2);
        
        private static readonly KalkVectorConstructor<short> Short4Constructor = new KalkVectorConstructor<short>(4);
        
        private static readonly KalkVectorConstructor<short> Short8Constructor = new KalkVectorConstructor<short>(8);
        
        private static readonly KalkVectorConstructor<short> Short16Constructor = new KalkVectorConstructor<short>(16);
        
        private static readonly KalkVectorConstructor<short> Short32Constructor = new KalkVectorConstructor<short>(32);
            
        private static readonly KalkVectorConstructor<ushort> UShort2Constructor = new KalkVectorConstructor<ushort>(2);
        
        private static readonly KalkVectorConstructor<ushort> UShort4Constructor = new KalkVectorConstructor<ushort>(4);
        
        private static readonly KalkVectorConstructor<ushort> UShort8Constructor = new KalkVectorConstructor<ushort>(8);
        
        private static readonly KalkVectorConstructor<ushort> UShort16Constructor = new KalkVectorConstructor<ushort>(16);
        
        private static readonly KalkVectorConstructor<ushort> UShort32Constructor = new KalkVectorConstructor<ushort>(32);
            
        private static readonly KalkVectorConstructor<int> Int2Constructor = new KalkVectorConstructor<int>(2);
        
        private static readonly KalkVectorConstructor<int> Int3Constructor = new KalkVectorConstructor<int>(3);
        
        private static readonly KalkVectorConstructor<int> Int4Constructor = new KalkVectorConstructor<int>(4);
        
        private static readonly KalkVectorConstructor<int> Int8Constructor = new KalkVectorConstructor<int>(8);
        
        private static readonly KalkVectorConstructor<int> Int16Constructor = new KalkVectorConstructor<int>(16);
            
        private static readonly KalkVectorConstructor<uint> UInt2Constructor = new KalkVectorConstructor<uint>(2);
        
        private static readonly KalkVectorConstructor<uint> UInt3Constructor = new KalkVectorConstructor<uint>(3);
        
        private static readonly KalkVectorConstructor<uint> UInt4Constructor = new KalkVectorConstructor<uint>(4);
        
        private static readonly KalkVectorConstructor<uint> UInt8Constructor = new KalkVectorConstructor<uint>(8);
        
        private static readonly KalkVectorConstructor<uint> UInt16Constructor = new KalkVectorConstructor<uint>(16);
            
        private static readonly KalkVectorConstructor<long> Long2Constructor = new KalkVectorConstructor<long>(2);
        
        private static readonly KalkVectorConstructor<long> Long3Constructor = new KalkVectorConstructor<long>(3);
        
        private static readonly KalkVectorConstructor<long> Long4Constructor = new KalkVectorConstructor<long>(4);
        
        private static readonly KalkVectorConstructor<long> Long8Constructor = new KalkVectorConstructor<long>(8);
            
        private static readonly KalkVectorConstructor<ulong> ULong2Constructor = new KalkVectorConstructor<ulong>(2);
        
        private static readonly KalkVectorConstructor<ulong> ULong3Constructor = new KalkVectorConstructor<ulong>(3);
        
        private static readonly KalkVectorConstructor<ulong> ULong4Constructor = new KalkVectorConstructor<ulong>(4);
        
        private static readonly KalkVectorConstructor<ulong> ULong8Constructor = new KalkVectorConstructor<ulong>(8);
            
        private static readonly KalkVectorConstructor<KalkBool> Bool2Constructor = new KalkVectorConstructor<KalkBool>(2);
        
        private static readonly KalkVectorConstructor<KalkBool> Bool3Constructor = new KalkVectorConstructor<KalkBool>(3);
        
        private static readonly KalkVectorConstructor<KalkBool> Bool4Constructor = new KalkVectorConstructor<KalkBool>(4);
        
        private static readonly KalkVectorConstructor<KalkBool> Bool8Constructor = new KalkVectorConstructor<KalkBool>(8);
        
        private static readonly KalkVectorConstructor<KalkBool> Bool16Constructor = new KalkVectorConstructor<KalkBool>(16);
            
        private static readonly KalkVectorConstructor<float> Float2Constructor = new KalkVectorConstructor<float>(2);
        
        private static readonly KalkVectorConstructor<float> Float3Constructor = new KalkVectorConstructor<float>(3);
        
        private static readonly KalkVectorConstructor<float> Float4Constructor = new KalkVectorConstructor<float>(4);
        
        private static readonly KalkVectorConstructor<float> Float8Constructor = new KalkVectorConstructor<float>(8);
        
        private static readonly KalkVectorConstructor<float> Float16Constructor = new KalkVectorConstructor<float>(16);
            
        private static readonly KalkVectorConstructor<double> Double2Constructor = new KalkVectorConstructor<double>(2);
        
        private static readonly KalkVectorConstructor<double> Double3Constructor = new KalkVectorConstructor<double>(3);
        
        private static readonly KalkVectorConstructor<double> Double4Constructor = new KalkVectorConstructor<double>(4);
        
        private static readonly KalkVectorConstructor<double> Double8Constructor = new KalkVectorConstructor<double>(8);
            
        private static readonly KalkVectorConstructor<KalkHalf> Half2Constructor = new KalkVectorConstructor<KalkHalf>(2);
        
        private static readonly KalkVectorConstructor<KalkHalf> Half3Constructor = new KalkVectorConstructor<KalkHalf>(3);
        
        private static readonly KalkVectorConstructor<KalkHalf> Half4Constructor = new KalkVectorConstructor<KalkHalf>(4);
        
        private static readonly KalkVectorConstructor<KalkHalf> Half8Constructor = new KalkVectorConstructor<KalkHalf>(8);
        
        private static readonly KalkVectorConstructor<KalkHalf> Half16Constructor = new KalkVectorConstructor<KalkHalf>(16);
        
        private static readonly KalkVectorConstructor<KalkHalf> Half32Constructor = new KalkVectorConstructor<KalkHalf>(32);
    
        private static readonly KalkMatrixConstructor<KalkBool> Bool2x2Constructor = new KalkMatrixConstructor<KalkBool>(2, 2);
        private static readonly KalkMatrixConstructor<KalkBool> Bool2x3Constructor = new KalkMatrixConstructor<KalkBool>(2, 3);
        private static readonly KalkMatrixConstructor<KalkBool> Bool2x4Constructor = new KalkMatrixConstructor<KalkBool>(2, 4);
        private static readonly KalkMatrixConstructor<KalkBool> Bool3x2Constructor = new KalkMatrixConstructor<KalkBool>(3, 2);
        private static readonly KalkMatrixConstructor<KalkBool> Bool3x3Constructor = new KalkMatrixConstructor<KalkBool>(3, 3);
        private static readonly KalkMatrixConstructor<KalkBool> Bool3x4Constructor = new KalkMatrixConstructor<KalkBool>(3, 4);
        private static readonly KalkMatrixConstructor<KalkBool> Bool4x2Constructor = new KalkMatrixConstructor<KalkBool>(4, 2);
        private static readonly KalkMatrixConstructor<KalkBool> Bool4x3Constructor = new KalkMatrixConstructor<KalkBool>(4, 3);
        private static readonly KalkMatrixConstructor<KalkBool> Bool4x4Constructor = new KalkMatrixConstructor<KalkBool>(4, 4);
        private static readonly KalkMatrixConstructor<int> Int2x2Constructor = new KalkMatrixConstructor<int>(2, 2);
        private static readonly KalkMatrixConstructor<int> Int2x3Constructor = new KalkMatrixConstructor<int>(2, 3);
        private static readonly KalkMatrixConstructor<int> Int2x4Constructor = new KalkMatrixConstructor<int>(2, 4);
        private static readonly KalkMatrixConstructor<int> Int3x2Constructor = new KalkMatrixConstructor<int>(3, 2);
        private static readonly KalkMatrixConstructor<int> Int3x3Constructor = new KalkMatrixConstructor<int>(3, 3);
        private static readonly KalkMatrixConstructor<int> Int3x4Constructor = new KalkMatrixConstructor<int>(3, 4);
        private static readonly KalkMatrixConstructor<int> Int4x2Constructor = new KalkMatrixConstructor<int>(4, 2);
        private static readonly KalkMatrixConstructor<int> Int4x3Constructor = new KalkMatrixConstructor<int>(4, 3);
        private static readonly KalkMatrixConstructor<int> Int4x4Constructor = new KalkMatrixConstructor<int>(4, 4);
        private static readonly KalkMatrixConstructor<float> Float2x2Constructor = new KalkMatrixConstructor<float>(2, 2);
        private static readonly KalkMatrixConstructor<float> Float2x3Constructor = new KalkMatrixConstructor<float>(2, 3);
        private static readonly KalkMatrixConstructor<float> Float2x4Constructor = new KalkMatrixConstructor<float>(2, 4);
        private static readonly KalkMatrixConstructor<float> Float3x2Constructor = new KalkMatrixConstructor<float>(3, 2);
        private static readonly KalkMatrixConstructor<float> Float3x3Constructor = new KalkMatrixConstructor<float>(3, 3);
        private static readonly KalkMatrixConstructor<float> Float3x4Constructor = new KalkMatrixConstructor<float>(3, 4);
        private static readonly KalkMatrixConstructor<float> Float4x2Constructor = new KalkMatrixConstructor<float>(4, 2);
        private static readonly KalkMatrixConstructor<float> Float4x3Constructor = new KalkMatrixConstructor<float>(4, 3);
        private static readonly KalkMatrixConstructor<float> Float4x4Constructor = new KalkMatrixConstructor<float>(4, 4);
        private static readonly KalkMatrixConstructor<double> Double2x2Constructor = new KalkMatrixConstructor<double>(2, 2);
        private static readonly KalkMatrixConstructor<double> Double2x3Constructor = new KalkMatrixConstructor<double>(2, 3);
        private static readonly KalkMatrixConstructor<double> Double2x4Constructor = new KalkMatrixConstructor<double>(2, 4);
        private static readonly KalkMatrixConstructor<double> Double3x2Constructor = new KalkMatrixConstructor<double>(3, 2);
        private static readonly KalkMatrixConstructor<double> Double3x3Constructor = new KalkMatrixConstructor<double>(3, 3);
        private static readonly KalkMatrixConstructor<double> Double3x4Constructor = new KalkMatrixConstructor<double>(3, 4);
        private static readonly KalkMatrixConstructor<double> Double4x2Constructor = new KalkMatrixConstructor<double>(4, 2);
        private static readonly KalkMatrixConstructor<double> Double4x3Constructor = new KalkMatrixConstructor<double>(4, 3);
        private static readonly KalkMatrixConstructor<double> Double4x4Constructor = new KalkMatrixConstructor<double>(4, 4);
        private static readonly KalkMatrixConstructor<KalkHalf> Half2x2Constructor = new KalkMatrixConstructor<KalkHalf>(2, 2);
        private static readonly KalkMatrixConstructor<KalkHalf> Half2x3Constructor = new KalkMatrixConstructor<KalkHalf>(2, 3);
        private static readonly KalkMatrixConstructor<KalkHalf> Half2x4Constructor = new KalkMatrixConstructor<KalkHalf>(2, 4);
        private static readonly KalkMatrixConstructor<KalkHalf> Half3x2Constructor = new KalkMatrixConstructor<KalkHalf>(3, 2);
        private static readonly KalkMatrixConstructor<KalkHalf> Half3x3Constructor = new KalkMatrixConstructor<KalkHalf>(3, 3);
        private static readonly KalkMatrixConstructor<KalkHalf> Half3x4Constructor = new KalkMatrixConstructor<KalkHalf>(3, 4);
        private static readonly KalkMatrixConstructor<KalkHalf> Half4x2Constructor = new KalkMatrixConstructor<KalkHalf>(4, 2);
        private static readonly KalkMatrixConstructor<KalkHalf> Half4x3Constructor = new KalkMatrixConstructor<KalkHalf>(4, 3);
        private static readonly KalkMatrixConstructor<KalkHalf> Half4x4Constructor = new KalkMatrixConstructor<KalkHalf>(4, 4);

        /// <summary>Creates a vector of 16 `byte` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `byte16(123)` will initialize all elements with 123.
        /// - an array value: `byte16(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `byte4(byte2(1,2), byte2(3,4))` or `byte4(byte3(1,2,3), 4)`.
        /// </param>
        /// <returns>A byte16 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> byte16
        /// # byte16
        /// out = byte16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> byte16(1..16)
        /// # byte16(1..16)
        /// out = byte16(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
        /// >>> byte16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// # byte16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// out = byte16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// ```
        /// </example>
        [KalkExport("byte16", CategoryVectorTypeConstructors)]
        public KalkVector<byte> CreateByte16(params object[] arguments) => Byte16Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 32 `byte` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `byte32(123)` will initialize all elements with 123.
        /// - an array value: `byte32(1..32)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `byte4(byte2(1,2), byte2(3,4))` or `byte4(byte3(1,2,3), 4)`.
        /// </param>
        /// <returns>A byte32 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> byte32
        /// # byte32
        /// out = byte32(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> byte32(1..32)
        /// # byte32(1..32)
        /// out = byte32(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
        /// ```
        /// </example>
        [KalkExport("byte32", CategoryVectorTypeConstructors)]
        public KalkVector<byte> CreateByte32(params object[] arguments) => Byte32Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 64 `byte` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `byte64(123)` will initialize all elements with 123.
        /// - an array value: `byte64(1..64)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `byte4(byte2(1,2), byte2(3,4))` or `byte4(byte3(1,2,3), 4)`.
        /// </param>
        /// <returns>A byte64 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> byte64
        /// # byte64
        /// out = byte64(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> byte64(1..64)
        /// # byte64(1..64)
        /// out = byte64(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64)
        /// ```
        /// </example>
        [KalkExport("byte64", CategoryVectorTypeConstructors)]
        public KalkVector<byte> CreateByte64(params object[] arguments) => Byte64Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 16 `sbyte` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `sbyte16(123)` will initialize all elements with 123.
        /// - an array value: `sbyte16(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `sbyte4(sbyte2(1,2), sbyte2(3,4))` or `sbyte4(sbyte3(1,2,3), 4)`.
        /// </param>
        /// <returns>A sbyte16 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> sbyte16
        /// # sbyte16
        /// out = sbyte16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> sbyte16(1..16)
        /// # sbyte16(1..16)
        /// out = sbyte16(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
        /// >>> sbyte16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// # sbyte16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// out = sbyte16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// ```
        /// </example>
        [KalkExport("sbyte16", CategoryVectorTypeConstructors)]
        public KalkVector<sbyte> CreateSByte16(params object[] arguments) => SByte16Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 32 `sbyte` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `sbyte32(123)` will initialize all elements with 123.
        /// - an array value: `sbyte32(1..32)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `sbyte4(sbyte2(1,2), sbyte2(3,4))` or `sbyte4(sbyte3(1,2,3), 4)`.
        /// </param>
        /// <returns>A sbyte32 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> sbyte32
        /// # sbyte32
        /// out = sbyte32(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> sbyte32(1..32)
        /// # sbyte32(1..32)
        /// out = sbyte32(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
        /// ```
        /// </example>
        [KalkExport("sbyte32", CategoryVectorTypeConstructors)]
        public KalkVector<sbyte> CreateSByte32(params object[] arguments) => SByte32Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 64 `sbyte` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `sbyte64(123)` will initialize all elements with 123.
        /// - an array value: `sbyte64(1..64)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `sbyte4(sbyte2(1,2), sbyte2(3,4))` or `sbyte4(sbyte3(1,2,3), 4)`.
        /// </param>
        /// <returns>A sbyte64 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> sbyte64
        /// # sbyte64
        /// out = sbyte64(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> sbyte64(1..64)
        /// # sbyte64(1..64)
        /// out = sbyte64(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64)
        /// ```
        /// </example>
        [KalkExport("sbyte64", CategoryVectorTypeConstructors)]
        public KalkVector<sbyte> CreateSByte64(params object[] arguments) => SByte64Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 2 `short` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `short2(123)` will initialize all elements with 123.
        /// - an array value: `short2(1..2)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `short4(short2(1,2), short2(3,4))` or `short4(short3(1,2,3), 4)`.
        /// </param>
        /// <returns>A short2 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> short2
        /// # short2
        /// out = short2(0, 0)
        /// >>> short2(1..2)
        /// # short2(1..2)
        /// out = short2(1, 2)
        /// >>> short2(10, 11)
        /// # short2(10, 11)
        /// out = short2(10, 11)
        /// ```
        /// </example>
        [KalkExport("short2", CategoryVectorTypeConstructors)]
        public KalkVector<short> CreateShort2(params object[] arguments) => Short2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 4 `short` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `short4(123)` will initialize all elements with 123.
        /// - an array value: `short4(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `short4(short2(1,2), short2(3,4))` or `short4(short3(1,2,3), 4)`.
        /// </param>
        /// <returns>A short4 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> short4
        /// # short4
        /// out = short4(0, 0, 0, 0)
        /// >>> short4(1..4)
        /// # short4(1..4)
        /// out = short4(1, 2, 3, 4)
        /// >>> short4(10, 11, 12, 13)
        /// # short4(10, 11, 12, 13)
        /// out = short4(10, 11, 12, 13)
        /// ```
        /// </example>
        [KalkExport("short4", CategoryVectorTypeConstructors)]
        public KalkVector<short> CreateShort4(params object[] arguments) => Short4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 8 `short` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `short8(123)` will initialize all elements with 123.
        /// - an array value: `short8(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `short4(short2(1,2), short2(3,4))` or `short4(short3(1,2,3), 4)`.
        /// </param>
        /// <returns>A short8 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> short8
        /// # short8
        /// out = short8(0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> short8(1..8)
        /// # short8(1..8)
        /// out = short8(1, 2, 3, 4, 5, 6, 7, 8)
        /// >>> short8(10, 11, 12, 13, 14, 15, 16, 17)
        /// # short8(10, 11, 12, 13, 14, 15, 16, 17)
        /// out = short8(10, 11, 12, 13, 14, 15, 16, 17)
        /// ```
        /// </example>
        [KalkExport("short8", CategoryVectorTypeConstructors)]
        public KalkVector<short> CreateShort8(params object[] arguments) => Short8Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 16 `short` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `short16(123)` will initialize all elements with 123.
        /// - an array value: `short16(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `short4(short2(1,2), short2(3,4))` or `short4(short3(1,2,3), 4)`.
        /// </param>
        /// <returns>A short16 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> short16
        /// # short16
        /// out = short16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> short16(1..16)
        /// # short16(1..16)
        /// out = short16(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
        /// >>> short16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// # short16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// out = short16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// ```
        /// </example>
        [KalkExport("short16", CategoryVectorTypeConstructors)]
        public KalkVector<short> CreateShort16(params object[] arguments) => Short16Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 32 `short` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `short32(123)` will initialize all elements with 123.
        /// - an array value: `short32(1..32)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `short4(short2(1,2), short2(3,4))` or `short4(short3(1,2,3), 4)`.
        /// </param>
        /// <returns>A short32 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> short32
        /// # short32
        /// out = short32(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> short32(1..32)
        /// # short32(1..32)
        /// out = short32(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
        /// ```
        /// </example>
        [KalkExport("short32", CategoryVectorTypeConstructors)]
        public KalkVector<short> CreateShort32(params object[] arguments) => Short32Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 2 `ushort` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `ushort2(123)` will initialize all elements with 123.
        /// - an array value: `ushort2(1..2)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `ushort4(ushort2(1,2), ushort2(3,4))` or `ushort4(ushort3(1,2,3), 4)`.
        /// </param>
        /// <returns>A ushort2 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> ushort2
        /// # ushort2
        /// out = ushort2(0, 0)
        /// >>> ushort2(1..2)
        /// # ushort2(1..2)
        /// out = ushort2(1, 2)
        /// >>> ushort2(10, 11)
        /// # ushort2(10, 11)
        /// out = ushort2(10, 11)
        /// ```
        /// </example>
        [KalkExport("ushort2", CategoryVectorTypeConstructors)]
        public KalkVector<ushort> CreateUShort2(params object[] arguments) => UShort2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 4 `ushort` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `ushort4(123)` will initialize all elements with 123.
        /// - an array value: `ushort4(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `ushort4(ushort2(1,2), ushort2(3,4))` or `ushort4(ushort3(1,2,3), 4)`.
        /// </param>
        /// <returns>A ushort4 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> ushort4
        /// # ushort4
        /// out = ushort4(0, 0, 0, 0)
        /// >>> ushort4(1..4)
        /// # ushort4(1..4)
        /// out = ushort4(1, 2, 3, 4)
        /// >>> ushort4(10, 11, 12, 13)
        /// # ushort4(10, 11, 12, 13)
        /// out = ushort4(10, 11, 12, 13)
        /// ```
        /// </example>
        [KalkExport("ushort4", CategoryVectorTypeConstructors)]
        public KalkVector<ushort> CreateUShort4(params object[] arguments) => UShort4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 8 `ushort` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `ushort8(123)` will initialize all elements with 123.
        /// - an array value: `ushort8(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `ushort4(ushort2(1,2), ushort2(3,4))` or `ushort4(ushort3(1,2,3), 4)`.
        /// </param>
        /// <returns>A ushort8 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> ushort8
        /// # ushort8
        /// out = ushort8(0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> ushort8(1..8)
        /// # ushort8(1..8)
        /// out = ushort8(1, 2, 3, 4, 5, 6, 7, 8)
        /// >>> ushort8(10, 11, 12, 13, 14, 15, 16, 17)
        /// # ushort8(10, 11, 12, 13, 14, 15, 16, 17)
        /// out = ushort8(10, 11, 12, 13, 14, 15, 16, 17)
        /// ```
        /// </example>
        [KalkExport("ushort8", CategoryVectorTypeConstructors)]
        public KalkVector<ushort> CreateUShort8(params object[] arguments) => UShort8Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 16 `ushort` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `ushort16(123)` will initialize all elements with 123.
        /// - an array value: `ushort16(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `ushort4(ushort2(1,2), ushort2(3,4))` or `ushort4(ushort3(1,2,3), 4)`.
        /// </param>
        /// <returns>A ushort16 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> ushort16
        /// # ushort16
        /// out = ushort16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> ushort16(1..16)
        /// # ushort16(1..16)
        /// out = ushort16(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
        /// >>> ushort16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// # ushort16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// out = ushort16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// ```
        /// </example>
        [KalkExport("ushort16", CategoryVectorTypeConstructors)]
        public KalkVector<ushort> CreateUShort16(params object[] arguments) => UShort16Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 32 `ushort` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `ushort32(123)` will initialize all elements with 123.
        /// - an array value: `ushort32(1..32)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `ushort4(ushort2(1,2), ushort2(3,4))` or `ushort4(ushort3(1,2,3), 4)`.
        /// </param>
        /// <returns>A ushort32 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> ushort32
        /// # ushort32
        /// out = ushort32(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> ushort32(1..32)
        /// # ushort32(1..32)
        /// out = ushort32(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
        /// ```
        /// </example>
        [KalkExport("ushort32", CategoryVectorTypeConstructors)]
        public KalkVector<ushort> CreateUShort32(params object[] arguments) => UShort32Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 2 `int` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int2(123)` will initialize all elements with 123.
        /// - an array value: `int2(1..2)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int4(int2(1,2), int2(3,4))` or `int4(int3(1,2,3), 4)`.
        /// </param>
        /// <returns>A int2 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> int2
        /// # int2
        /// out = int2(0, 0)
        /// >>> int2(1..2)
        /// # int2(1..2)
        /// out = int2(1, 2)
        /// >>> int2(10, 11)
        /// # int2(10, 11)
        /// out = int2(10, 11)
        /// ```
        /// </example>
        [KalkExport("int2", CategoryVectorTypeConstructors)]
        public KalkVector<int> CreateInt2(params object[] arguments) => Int2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 3 `int` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int3(123)` will initialize all elements with 123.
        /// - an array value: `int3(1..3)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int4(int2(1,2), int2(3,4))` or `int4(int3(1,2,3), 4)`.
        /// </param>
        /// <returns>A int3 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> int3
        /// # int3
        /// out = int3(0, 0, 0)
        /// >>> int3(1..3)
        /// # int3(1..3)
        /// out = int3(1, 2, 3)
        /// >>> int3(10, 11, 12)
        /// # int3(10, 11, 12)
        /// out = int3(10, 11, 12)
        /// ```
        /// </example>
        [KalkExport("int3", CategoryVectorTypeConstructors)]
        public KalkVector<int> CreateInt3(params object[] arguments) => Int3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 4 `int` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int4(123)` will initialize all elements with 123.
        /// - an array value: `int4(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int4(int2(1,2), int2(3,4))` or `int4(int3(1,2,3), 4)`.
        /// </param>
        /// <returns>A int4 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> int4
        /// # int4
        /// out = int4(0, 0, 0, 0)
        /// >>> int4(1..4)
        /// # int4(1..4)
        /// out = int4(1, 2, 3, 4)
        /// >>> int4(10, 11, 12, 13)
        /// # int4(10, 11, 12, 13)
        /// out = int4(10, 11, 12, 13)
        /// ```
        /// </example>
        [KalkExport("int4", CategoryVectorTypeConstructors)]
        public KalkVector<int> CreateInt4(params object[] arguments) => Int4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 8 `int` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int8(123)` will initialize all elements with 123.
        /// - an array value: `int8(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int4(int2(1,2), int2(3,4))` or `int4(int3(1,2,3), 4)`.
        /// </param>
        /// <returns>A int8 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> int8
        /// # int8
        /// out = int8(0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> int8(1..8)
        /// # int8(1..8)
        /// out = int8(1, 2, 3, 4, 5, 6, 7, 8)
        /// >>> int8(10, 11, 12, 13, 14, 15, 16, 17)
        /// # int8(10, 11, 12, 13, 14, 15, 16, 17)
        /// out = int8(10, 11, 12, 13, 14, 15, 16, 17)
        /// ```
        /// </example>
        [KalkExport("int8", CategoryVectorTypeConstructors)]
        public KalkVector<int> CreateInt8(params object[] arguments) => Int8Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 16 `int` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int16(123)` will initialize all elements with 123.
        /// - an array value: `int16(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int4(int2(1,2), int2(3,4))` or `int4(int3(1,2,3), 4)`.
        /// </param>
        /// <returns>A int16 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> int16
        /// # int16
        /// out = int16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> int16(1..16)
        /// # int16(1..16)
        /// out = int16(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
        /// >>> int16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// # int16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// out = int16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// ```
        /// </example>
        [KalkExport("int16", CategoryVectorTypeConstructors)]
        public KalkVector<int> CreateInt16(params object[] arguments) => Int16Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 2 `uint` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `uint2(123)` will initialize all elements with 123.
        /// - an array value: `uint2(1..2)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `uint4(uint2(1,2), uint2(3,4))` or `uint4(uint3(1,2,3), 4)`.
        /// </param>
        /// <returns>A uint2 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> uint2
        /// # uint2
        /// out = uint2(0, 0)
        /// >>> uint2(1..2)
        /// # uint2(1..2)
        /// out = uint2(1, 2)
        /// >>> uint2(10, 11)
        /// # uint2(10, 11)
        /// out = uint2(10, 11)
        /// ```
        /// </example>
        [KalkExport("uint2", CategoryVectorTypeConstructors)]
        public KalkVector<uint> CreateUInt2(params object[] arguments) => UInt2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 3 `uint` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `uint3(123)` will initialize all elements with 123.
        /// - an array value: `uint3(1..3)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `uint4(uint2(1,2), uint2(3,4))` or `uint4(uint3(1,2,3), 4)`.
        /// </param>
        /// <returns>A uint3 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> uint3
        /// # uint3
        /// out = uint3(0, 0, 0)
        /// >>> uint3(1..3)
        /// # uint3(1..3)
        /// out = uint3(1, 2, 3)
        /// >>> uint3(10, 11, 12)
        /// # uint3(10, 11, 12)
        /// out = uint3(10, 11, 12)
        /// ```
        /// </example>
        [KalkExport("uint3", CategoryVectorTypeConstructors)]
        public KalkVector<uint> CreateUInt3(params object[] arguments) => UInt3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 4 `uint` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `uint4(123)` will initialize all elements with 123.
        /// - an array value: `uint4(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `uint4(uint2(1,2), uint2(3,4))` or `uint4(uint3(1,2,3), 4)`.
        /// </param>
        /// <returns>A uint4 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> uint4
        /// # uint4
        /// out = uint4(0, 0, 0, 0)
        /// >>> uint4(1..4)
        /// # uint4(1..4)
        /// out = uint4(1, 2, 3, 4)
        /// >>> uint4(10, 11, 12, 13)
        /// # uint4(10, 11, 12, 13)
        /// out = uint4(10, 11, 12, 13)
        /// ```
        /// </example>
        [KalkExport("uint4", CategoryVectorTypeConstructors)]
        public KalkVector<uint> CreateUInt4(params object[] arguments) => UInt4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 8 `uint` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `uint8(123)` will initialize all elements with 123.
        /// - an array value: `uint8(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `uint4(uint2(1,2), uint2(3,4))` or `uint4(uint3(1,2,3), 4)`.
        /// </param>
        /// <returns>A uint8 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> uint8
        /// # uint8
        /// out = uint8(0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> uint8(1..8)
        /// # uint8(1..8)
        /// out = uint8(1, 2, 3, 4, 5, 6, 7, 8)
        /// >>> uint8(10, 11, 12, 13, 14, 15, 16, 17)
        /// # uint8(10, 11, 12, 13, 14, 15, 16, 17)
        /// out = uint8(10, 11, 12, 13, 14, 15, 16, 17)
        /// ```
        /// </example>
        [KalkExport("uint8", CategoryVectorTypeConstructors)]
        public KalkVector<uint> CreateUInt8(params object[] arguments) => UInt8Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 16 `uint` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `uint16(123)` will initialize all elements with 123.
        /// - an array value: `uint16(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `uint4(uint2(1,2), uint2(3,4))` or `uint4(uint3(1,2,3), 4)`.
        /// </param>
        /// <returns>A uint16 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> uint16
        /// # uint16
        /// out = uint16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> uint16(1..16)
        /// # uint16(1..16)
        /// out = uint16(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
        /// >>> uint16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// # uint16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// out = uint16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// ```
        /// </example>
        [KalkExport("uint16", CategoryVectorTypeConstructors)]
        public KalkVector<uint> CreateUInt16(params object[] arguments) => UInt16Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 2 `long` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `long2(123)` will initialize all elements with 123.
        /// - an array value: `long2(1..2)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `long4(long2(1,2), long2(3,4))` or `long4(long3(1,2,3), 4)`.
        /// </param>
        /// <returns>A long2 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> long2
        /// # long2
        /// out = long2(0, 0)
        /// >>> long2(1..2)
        /// # long2(1..2)
        /// out = long2(1, 2)
        /// >>> long2(10, 11)
        /// # long2(10, 11)
        /// out = long2(10, 11)
        /// ```
        /// </example>
        [KalkExport("long2", CategoryVectorTypeConstructors)]
        public KalkVector<long> CreateLong2(params object[] arguments) => Long2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 3 `long` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `long3(123)` will initialize all elements with 123.
        /// - an array value: `long3(1..3)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `long4(long2(1,2), long2(3,4))` or `long4(long3(1,2,3), 4)`.
        /// </param>
        /// <returns>A long3 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> long3
        /// # long3
        /// out = long3(0, 0, 0)
        /// >>> long3(1..3)
        /// # long3(1..3)
        /// out = long3(1, 2, 3)
        /// >>> long3(10, 11, 12)
        /// # long3(10, 11, 12)
        /// out = long3(10, 11, 12)
        /// ```
        /// </example>
        [KalkExport("long3", CategoryVectorTypeConstructors)]
        public KalkVector<long> CreateLong3(params object[] arguments) => Long3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 4 `long` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `long4(123)` will initialize all elements with 123.
        /// - an array value: `long4(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `long4(long2(1,2), long2(3,4))` or `long4(long3(1,2,3), 4)`.
        /// </param>
        /// <returns>A long4 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> long4
        /// # long4
        /// out = long4(0, 0, 0, 0)
        /// >>> long4(1..4)
        /// # long4(1..4)
        /// out = long4(1, 2, 3, 4)
        /// >>> long4(10, 11, 12, 13)
        /// # long4(10, 11, 12, 13)
        /// out = long4(10, 11, 12, 13)
        /// ```
        /// </example>
        [KalkExport("long4", CategoryVectorTypeConstructors)]
        public KalkVector<long> CreateLong4(params object[] arguments) => Long4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 8 `long` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `long8(123)` will initialize all elements with 123.
        /// - an array value: `long8(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `long4(long2(1,2), long2(3,4))` or `long4(long3(1,2,3), 4)`.
        /// </param>
        /// <returns>A long8 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> long8
        /// # long8
        /// out = long8(0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> long8(1..8)
        /// # long8(1..8)
        /// out = long8(1, 2, 3, 4, 5, 6, 7, 8)
        /// >>> long8(10, 11, 12, 13, 14, 15, 16, 17)
        /// # long8(10, 11, 12, 13, 14, 15, 16, 17)
        /// out = long8(10, 11, 12, 13, 14, 15, 16, 17)
        /// ```
        /// </example>
        [KalkExport("long8", CategoryVectorTypeConstructors)]
        public KalkVector<long> CreateLong8(params object[] arguments) => Long8Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 2 `ulong` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `ulong2(123)` will initialize all elements with 123.
        /// - an array value: `ulong2(1..2)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `ulong4(ulong2(1,2), ulong2(3,4))` or `ulong4(ulong3(1,2,3), 4)`.
        /// </param>
        /// <returns>A ulong2 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> ulong2
        /// # ulong2
        /// out = ulong2(0, 0)
        /// >>> ulong2(1..2)
        /// # ulong2(1..2)
        /// out = ulong2(1, 2)
        /// >>> ulong2(10, 11)
        /// # ulong2(10, 11)
        /// out = ulong2(10, 11)
        /// ```
        /// </example>
        [KalkExport("ulong2", CategoryVectorTypeConstructors)]
        public KalkVector<ulong> CreateULong2(params object[] arguments) => ULong2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 3 `ulong` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `ulong3(123)` will initialize all elements with 123.
        /// - an array value: `ulong3(1..3)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `ulong4(ulong2(1,2), ulong2(3,4))` or `ulong4(ulong3(1,2,3), 4)`.
        /// </param>
        /// <returns>A ulong3 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> ulong3
        /// # ulong3
        /// out = ulong3(0, 0, 0)
        /// >>> ulong3(1..3)
        /// # ulong3(1..3)
        /// out = ulong3(1, 2, 3)
        /// >>> ulong3(10, 11, 12)
        /// # ulong3(10, 11, 12)
        /// out = ulong3(10, 11, 12)
        /// ```
        /// </example>
        [KalkExport("ulong3", CategoryVectorTypeConstructors)]
        public KalkVector<ulong> CreateULong3(params object[] arguments) => ULong3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 4 `ulong` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `ulong4(123)` will initialize all elements with 123.
        /// - an array value: `ulong4(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `ulong4(ulong2(1,2), ulong2(3,4))` or `ulong4(ulong3(1,2,3), 4)`.
        /// </param>
        /// <returns>A ulong4 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> ulong4
        /// # ulong4
        /// out = ulong4(0, 0, 0, 0)
        /// >>> ulong4(1..4)
        /// # ulong4(1..4)
        /// out = ulong4(1, 2, 3, 4)
        /// >>> ulong4(10, 11, 12, 13)
        /// # ulong4(10, 11, 12, 13)
        /// out = ulong4(10, 11, 12, 13)
        /// ```
        /// </example>
        [KalkExport("ulong4", CategoryVectorTypeConstructors)]
        public KalkVector<ulong> CreateULong4(params object[] arguments) => ULong4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 8 `ulong` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `ulong8(123)` will initialize all elements with 123.
        /// - an array value: `ulong8(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `ulong4(ulong2(1,2), ulong2(3,4))` or `ulong4(ulong3(1,2,3), 4)`.
        /// </param>
        /// <returns>A ulong8 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> ulong8
        /// # ulong8
        /// out = ulong8(0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> ulong8(1..8)
        /// # ulong8(1..8)
        /// out = ulong8(1, 2, 3, 4, 5, 6, 7, 8)
        /// >>> ulong8(10, 11, 12, 13, 14, 15, 16, 17)
        /// # ulong8(10, 11, 12, 13, 14, 15, 16, 17)
        /// out = ulong8(10, 11, 12, 13, 14, 15, 16, 17)
        /// ```
        /// </example>
        [KalkExport("ulong8", CategoryVectorTypeConstructors)]
        public KalkVector<ulong> CreateULong8(params object[] arguments) => ULong8Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 2 `bool` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: The vector is initialized with false values.
        /// - a single value: `bool2(true)` will initialize all elements with 123.
        /// - an array value: `bool2([true, false, ...])` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool4(bool2(true,false), bool2(false,true))` or `bool4(bool3(false,true,true), false)`)
        /// </param>
        /// <returns>A bool2 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> bool2(true)
        /// # bool2(true)
        /// out = bool2(true, true)
        /// ```
        /// </example>
        [KalkExport("bool2", CategoryVectorTypeConstructors)]
        public KalkVector<KalkBool> CreateBool2(params object[] arguments) => Bool2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 3 `bool` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: The vector is initialized with false values.
        /// - a single value: `bool3(true)` will initialize all elements with 123.
        /// - an array value: `bool3([true, false, ...])` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool4(bool2(true,false), bool2(false,true))` or `bool4(bool3(false,true,true), false)`)
        /// </param>
        /// <returns>A bool3 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> bool3(true)
        /// # bool3(true)
        /// out = bool3(true, true, true)
        /// ```
        /// </example>
        [KalkExport("bool3", CategoryVectorTypeConstructors)]
        public KalkVector<KalkBool> CreateBool3(params object[] arguments) => Bool3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 4 `bool` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: The vector is initialized with false values.
        /// - a single value: `bool4(true)` will initialize all elements with 123.
        /// - an array value: `bool4([true, false, ...])` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool4(bool2(true,false), bool2(false,true))` or `bool4(bool3(false,true,true), false)`)
        /// </param>
        /// <returns>A bool4 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> bool4(true)
        /// # bool4(true)
        /// out = bool4(true, true, true, true)
        /// ```
        /// </example>
        [KalkExport("bool4", CategoryVectorTypeConstructors)]
        public KalkVector<KalkBool> CreateBool4(params object[] arguments) => Bool4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 8 `bool` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: The vector is initialized with false values.
        /// - a single value: `bool8(true)` will initialize all elements with 123.
        /// - an array value: `bool8([true, false, ...])` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool4(bool2(true,false), bool2(false,true))` or `bool4(bool3(false,true,true), false)`)
        /// </param>
        /// <returns>A bool8 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> bool8(true)
        /// # bool8(true)
        /// out = bool8(true, true, true, true, true, true, true, true)
        /// ```
        /// </example>
        [KalkExport("bool8", CategoryVectorTypeConstructors)]
        public KalkVector<KalkBool> CreateBool8(params object[] arguments) => Bool8Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 16 `bool` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: The vector is initialized with false values.
        /// - a single value: `bool16(true)` will initialize all elements with 123.
        /// - an array value: `bool16([true, false, ...])` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool4(bool2(true,false), bool2(false,true))` or `bool4(bool3(false,true,true), false)`)
        /// </param>
        /// <returns>A bool16 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> bool16(true)
        /// # bool16(true)
        /// out = bool16(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true)
        /// ```
        /// </example>
        [KalkExport("bool16", CategoryVectorTypeConstructors)]
        public KalkVector<KalkBool> CreateBool16(params object[] arguments) => Bool16Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 2 `float` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float2(123)` will initialize all elements with 123.
        /// - an array value: `float2(1..2)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float4(float2(1,2), float2(3,4))` or `float4(float3(1,2,3), 4)`.
        /// </param>
        /// <returns>A float2 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> float2
        /// # float2
        /// out = float2(0, 0)
        /// >>> float2(1..2)
        /// # float2(1..2)
        /// out = float2(1, 2)
        /// >>> float2(10, 11)
        /// # float2(10, 11)
        /// out = float2(10, 11)
        /// ```
        /// </example>
        [KalkExport("float2", CategoryVectorTypeConstructors)]
        public KalkVector<float> CreateFloat2(params object[] arguments) => Float2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 3 `float` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float3(123)` will initialize all elements with 123.
        /// - an array value: `float3(1..3)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float4(float2(1,2), float2(3,4))` or `float4(float3(1,2,3), 4)`.
        /// </param>
        /// <returns>A float3 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> float3
        /// # float3
        /// out = float3(0, 0, 0)
        /// >>> float3(1..3)
        /// # float3(1..3)
        /// out = float3(1, 2, 3)
        /// >>> float3(10, 11, 12)
        /// # float3(10, 11, 12)
        /// out = float3(10, 11, 12)
        /// ```
        /// </example>
        [KalkExport("float3", CategoryVectorTypeConstructors)]
        public KalkVector<float> CreateFloat3(params object[] arguments) => Float3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 4 `float` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float4(123)` will initialize all elements with 123.
        /// - an array value: `float4(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float4(float2(1,2), float2(3,4))` or `float4(float3(1,2,3), 4)`.
        /// </param>
        /// <returns>A float4 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> float4
        /// # float4
        /// out = float4(0, 0, 0, 0)
        /// >>> float4(1..4)
        /// # float4(1..4)
        /// out = float4(1, 2, 3, 4)
        /// >>> float4(10, 11, 12, 13)
        /// # float4(10, 11, 12, 13)
        /// out = float4(10, 11, 12, 13)
        /// ```
        /// </example>
        [KalkExport("float4", CategoryVectorTypeConstructors)]
        public KalkVector<float> CreateFloat4(params object[] arguments) => Float4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 8 `float` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float8(123)` will initialize all elements with 123.
        /// - an array value: `float8(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float4(float2(1,2), float2(3,4))` or `float4(float3(1,2,3), 4)`.
        /// </param>
        /// <returns>A float8 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> float8
        /// # float8
        /// out = float8(0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> float8(1..8)
        /// # float8(1..8)
        /// out = float8(1, 2, 3, 4, 5, 6, 7, 8)
        /// >>> float8(10, 11, 12, 13, 14, 15, 16, 17)
        /// # float8(10, 11, 12, 13, 14, 15, 16, 17)
        /// out = float8(10, 11, 12, 13, 14, 15, 16, 17)
        /// ```
        /// </example>
        [KalkExport("float8", CategoryVectorTypeConstructors)]
        public KalkVector<float> CreateFloat8(params object[] arguments) => Float8Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 16 `float` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float16(123)` will initialize all elements with 123.
        /// - an array value: `float16(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float4(float2(1,2), float2(3,4))` or `float4(float3(1,2,3), 4)`.
        /// </param>
        /// <returns>A float16 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> float16
        /// # float16
        /// out = float16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> float16(1..16)
        /// # float16(1..16)
        /// out = float16(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
        /// >>> float16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// # float16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// out = float16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// ```
        /// </example>
        [KalkExport("float16", CategoryVectorTypeConstructors)]
        public KalkVector<float> CreateFloat16(params object[] arguments) => Float16Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 2 `double` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double2(123)` will initialize all elements with 123.
        /// - an array value: `double2(1..2)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double4(double2(1,2), double2(3,4))` or `double4(double3(1,2,3), 4)`.
        /// </param>
        /// <returns>A double2 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> double2
        /// # double2
        /// out = double2(0, 0)
        /// >>> double2(1..2)
        /// # double2(1..2)
        /// out = double2(1, 2)
        /// >>> double2(10, 11)
        /// # double2(10, 11)
        /// out = double2(10, 11)
        /// ```
        /// </example>
        [KalkExport("double2", CategoryVectorTypeConstructors)]
        public KalkVector<double> CreateDouble2(params object[] arguments) => Double2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 3 `double` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double3(123)` will initialize all elements with 123.
        /// - an array value: `double3(1..3)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double4(double2(1,2), double2(3,4))` or `double4(double3(1,2,3), 4)`.
        /// </param>
        /// <returns>A double3 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> double3
        /// # double3
        /// out = double3(0, 0, 0)
        /// >>> double3(1..3)
        /// # double3(1..3)
        /// out = double3(1, 2, 3)
        /// >>> double3(10, 11, 12)
        /// # double3(10, 11, 12)
        /// out = double3(10, 11, 12)
        /// ```
        /// </example>
        [KalkExport("double3", CategoryVectorTypeConstructors)]
        public KalkVector<double> CreateDouble3(params object[] arguments) => Double3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 4 `double` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double4(123)` will initialize all elements with 123.
        /// - an array value: `double4(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double4(double2(1,2), double2(3,4))` or `double4(double3(1,2,3), 4)`.
        /// </param>
        /// <returns>A double4 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> double4
        /// # double4
        /// out = double4(0, 0, 0, 0)
        /// >>> double4(1..4)
        /// # double4(1..4)
        /// out = double4(1, 2, 3, 4)
        /// >>> double4(10, 11, 12, 13)
        /// # double4(10, 11, 12, 13)
        /// out = double4(10, 11, 12, 13)
        /// ```
        /// </example>
        [KalkExport("double4", CategoryVectorTypeConstructors)]
        public KalkVector<double> CreateDouble4(params object[] arguments) => Double4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 8 `double` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double8(123)` will initialize all elements with 123.
        /// - an array value: `double8(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double4(double2(1,2), double2(3,4))` or `double4(double3(1,2,3), 4)`.
        /// </param>
        /// <returns>A double8 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> double8
        /// # double8
        /// out = double8(0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> double8(1..8)
        /// # double8(1..8)
        /// out = double8(1, 2, 3, 4, 5, 6, 7, 8)
        /// >>> double8(10, 11, 12, 13, 14, 15, 16, 17)
        /// # double8(10, 11, 12, 13, 14, 15, 16, 17)
        /// out = double8(10, 11, 12, 13, 14, 15, 16, 17)
        /// ```
        /// </example>
        [KalkExport("double8", CategoryVectorTypeConstructors)]
        public KalkVector<double> CreateDouble8(params object[] arguments) => Double8Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 2 `half` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half2(123)` will initialize all elements with 123.
        /// - an array value: `half2(1..2)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half4(half2(1,2), half2(3,4))` or `half4(half3(1,2,3), 4)`.
        /// </param>
        /// <returns>A half2 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> half2
        /// # half2
        /// out = half2(0, 0)
        /// >>> half2(1..2)
        /// # half2(1..2)
        /// out = half2(1, 2)
        /// >>> half2(10, 11)
        /// # half2(10, 11)
        /// out = half2(10, 11)
        /// ```
        /// </example>
        [KalkExport("half2", CategoryVectorTypeConstructors)]
        public KalkVector<KalkHalf> CreateHalf2(params object[] arguments) => Half2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 3 `half` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half3(123)` will initialize all elements with 123.
        /// - an array value: `half3(1..3)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half4(half2(1,2), half2(3,4))` or `half4(half3(1,2,3), 4)`.
        /// </param>
        /// <returns>A half3 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> half3
        /// # half3
        /// out = half3(0, 0, 0)
        /// >>> half3(1..3)
        /// # half3(1..3)
        /// out = half3(1, 2, 3)
        /// >>> half3(10, 11, 12)
        /// # half3(10, 11, 12)
        /// out = half3(10, 11, 12)
        /// ```
        /// </example>
        [KalkExport("half3", CategoryVectorTypeConstructors)]
        public KalkVector<KalkHalf> CreateHalf3(params object[] arguments) => Half3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 4 `half` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half4(123)` will initialize all elements with 123.
        /// - an array value: `half4(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half4(half2(1,2), half2(3,4))` or `half4(half3(1,2,3), 4)`.
        /// </param>
        /// <returns>A half4 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> half4
        /// # half4
        /// out = half4(0, 0, 0, 0)
        /// >>> half4(1..4)
        /// # half4(1..4)
        /// out = half4(1, 2, 3, 4)
        /// >>> half4(10, 11, 12, 13)
        /// # half4(10, 11, 12, 13)
        /// out = half4(10, 11, 12, 13)
        /// ```
        /// </example>
        [KalkExport("half4", CategoryVectorTypeConstructors)]
        public KalkVector<KalkHalf> CreateHalf4(params object[] arguments) => Half4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 8 `half` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half8(123)` will initialize all elements with 123.
        /// - an array value: `half8(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half4(half2(1,2), half2(3,4))` or `half4(half3(1,2,3), 4)`.
        /// </param>
        /// <returns>A half8 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> half8
        /// # half8
        /// out = half8(0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> half8(1..8)
        /// # half8(1..8)
        /// out = half8(1, 2, 3, 4, 5, 6, 7, 8)
        /// >>> half8(10, 11, 12, 13, 14, 15, 16, 17)
        /// # half8(10, 11, 12, 13, 14, 15, 16, 17)
        /// out = half8(10, 11, 12, 13, 14, 15, 16, 17)
        /// ```
        /// </example>
        [KalkExport("half8", CategoryVectorTypeConstructors)]
        public KalkVector<KalkHalf> CreateHalf8(params object[] arguments) => Half8Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 16 `half` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half16(123)` will initialize all elements with 123.
        /// - an array value: `half16(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half4(half2(1,2), half2(3,4))` or `half4(half3(1,2,3), 4)`.
        /// </param>
        /// <returns>A half16 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> half16
        /// # half16
        /// out = half16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> half16(1..16)
        /// # half16(1..16)
        /// out = half16(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
        /// >>> half16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// # half16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// out = half16(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
        /// ```
        /// </example>
        [KalkExport("half16", CategoryVectorTypeConstructors)]
        public KalkVector<KalkHalf> CreateHalf16(params object[] arguments) => Half16Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a vector of 32 `half` items.</summary>
        /// <param name="arguments">The vector item values. The total number of values must equal the dimension of the vector. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half32(123)` will initialize all elements with 123.
        /// - an array value: `half32(1..32)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half4(half2(1,2), half2(3,4))` or `half4(half3(1,2,3), 4)`.
        /// </param>
        /// <returns>A half32 vector initialized with the specified arguments</returns>
        /// <example>
        /// ```kalk
        /// >>> half32
        /// # half32
        /// out = half32(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        /// >>> half32(1..32)
        /// # half32(1..32)
        /// out = half32(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
        /// ```
        /// </example>
        [KalkExport("half32", CategoryVectorTypeConstructors)]
        public KalkVector<KalkHalf> CreateHalf32(params object[] arguments) => Half32Constructor.Invoke(Engine, arguments);


        /// <summary>Creates a 2 (rows) x 2 (columns) matrix of bool.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `bool2x2(123)` will initialize all elements with 123.
        /// - an array value: `bool2x2(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool3x4(bool4(1), bool4(2), bool4(3))`.
        /// </param>
        /// <returns>A bool2x2 matrix initialized with the specified arguments</returns>
        [KalkExport("bool2x2", CategoryMatrixConstructors)]
        public KalkMatrix<KalkBool> CreateBool2x2(params object[] arguments) => Bool2x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 3 (columns) matrix of bool.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `bool2x3(123)` will initialize all elements with 123.
        /// - an array value: `bool2x3(1..6)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool3x4(bool4(1), bool4(2), bool4(3))`.
        /// </param>
        /// <returns>A bool2x3 matrix initialized with the specified arguments</returns>
        [KalkExport("bool2x3", CategoryMatrixConstructors)]
        public KalkMatrix<KalkBool> CreateBool2x3(params object[] arguments) => Bool2x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 4 (columns) matrix of bool.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `bool2x4(123)` will initialize all elements with 123.
        /// - an array value: `bool2x4(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool3x4(bool4(1), bool4(2), bool4(3))`.
        /// </param>
        /// <returns>A bool2x4 matrix initialized with the specified arguments</returns>
        [KalkExport("bool2x4", CategoryMatrixConstructors)]
        public KalkMatrix<KalkBool> CreateBool2x4(params object[] arguments) => Bool2x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 2 (columns) matrix of bool.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `bool3x2(123)` will initialize all elements with 123.
        /// - an array value: `bool3x2(1..6)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool3x4(bool4(1), bool4(2), bool4(3))`.
        /// </param>
        /// <returns>A bool3x2 matrix initialized with the specified arguments</returns>
        [KalkExport("bool3x2", CategoryMatrixConstructors)]
        public KalkMatrix<KalkBool> CreateBool3x2(params object[] arguments) => Bool3x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 3 (columns) matrix of bool.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `bool3x3(123)` will initialize all elements with 123.
        /// - an array value: `bool3x3(1..9)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool3x4(bool4(1), bool4(2), bool4(3))`.
        /// </param>
        /// <returns>A bool3x3 matrix initialized with the specified arguments</returns>
        [KalkExport("bool3x3", CategoryMatrixConstructors)]
        public KalkMatrix<KalkBool> CreateBool3x3(params object[] arguments) => Bool3x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 4 (columns) matrix of bool.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `bool3x4(123)` will initialize all elements with 123.
        /// - an array value: `bool3x4(1..12)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool3x4(bool4(1), bool4(2), bool4(3))`.
        /// </param>
        /// <returns>A bool3x4 matrix initialized with the specified arguments</returns>
        [KalkExport("bool3x4", CategoryMatrixConstructors)]
        public KalkMatrix<KalkBool> CreateBool3x4(params object[] arguments) => Bool3x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 2 (columns) matrix of bool.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `bool4x2(123)` will initialize all elements with 123.
        /// - an array value: `bool4x2(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool3x4(bool4(1), bool4(2), bool4(3))`.
        /// </param>
        /// <returns>A bool4x2 matrix initialized with the specified arguments</returns>
        [KalkExport("bool4x2", CategoryMatrixConstructors)]
        public KalkMatrix<KalkBool> CreateBool4x2(params object[] arguments) => Bool4x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 3 (columns) matrix of bool.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `bool4x3(123)` will initialize all elements with 123.
        /// - an array value: `bool4x3(1..12)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool3x4(bool4(1), bool4(2), bool4(3))`.
        /// </param>
        /// <returns>A bool4x3 matrix initialized with the specified arguments</returns>
        [KalkExport("bool4x3", CategoryMatrixConstructors)]
        public KalkMatrix<KalkBool> CreateBool4x3(params object[] arguments) => Bool4x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 4 (columns) matrix of bool.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `bool4x4(123)` will initialize all elements with 123.
        /// - an array value: `bool4x4(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `bool3x4(bool4(1), bool4(2), bool4(3))`.
        /// </param>
        /// <returns>A bool4x4 matrix initialized with the specified arguments</returns>
        [KalkExport("bool4x4", CategoryMatrixConstructors)]
        public KalkMatrix<KalkBool> CreateBool4x4(params object[] arguments) => Bool4x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 2 (columns) matrix of int.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int2x2(123)` will initialize all elements with 123.
        /// - an array value: `int2x2(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int3x4(int4(1), int4(2), int4(3))`.
        /// </param>
        /// <returns>A int2x2 matrix initialized with the specified arguments</returns>
        [KalkExport("int2x2", CategoryMatrixConstructors)]
        public KalkMatrix<int> CreateInt2x2(params object[] arguments) => Int2x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 3 (columns) matrix of int.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int2x3(123)` will initialize all elements with 123.
        /// - an array value: `int2x3(1..6)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int3x4(int4(1), int4(2), int4(3))`.
        /// </param>
        /// <returns>A int2x3 matrix initialized with the specified arguments</returns>
        [KalkExport("int2x3", CategoryMatrixConstructors)]
        public KalkMatrix<int> CreateInt2x3(params object[] arguments) => Int2x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 4 (columns) matrix of int.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int2x4(123)` will initialize all elements with 123.
        /// - an array value: `int2x4(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int3x4(int4(1), int4(2), int4(3))`.
        /// </param>
        /// <returns>A int2x4 matrix initialized with the specified arguments</returns>
        [KalkExport("int2x4", CategoryMatrixConstructors)]
        public KalkMatrix<int> CreateInt2x4(params object[] arguments) => Int2x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 2 (columns) matrix of int.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int3x2(123)` will initialize all elements with 123.
        /// - an array value: `int3x2(1..6)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int3x4(int4(1), int4(2), int4(3))`.
        /// </param>
        /// <returns>A int3x2 matrix initialized with the specified arguments</returns>
        [KalkExport("int3x2", CategoryMatrixConstructors)]
        public KalkMatrix<int> CreateInt3x2(params object[] arguments) => Int3x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 3 (columns) matrix of int.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int3x3(123)` will initialize all elements with 123.
        /// - an array value: `int3x3(1..9)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int3x4(int4(1), int4(2), int4(3))`.
        /// </param>
        /// <returns>A int3x3 matrix initialized with the specified arguments</returns>
        [KalkExport("int3x3", CategoryMatrixConstructors)]
        public KalkMatrix<int> CreateInt3x3(params object[] arguments) => Int3x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 4 (columns) matrix of int.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int3x4(123)` will initialize all elements with 123.
        /// - an array value: `int3x4(1..12)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int3x4(int4(1), int4(2), int4(3))`.
        /// </param>
        /// <returns>A int3x4 matrix initialized with the specified arguments</returns>
        [KalkExport("int3x4", CategoryMatrixConstructors)]
        public KalkMatrix<int> CreateInt3x4(params object[] arguments) => Int3x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 2 (columns) matrix of int.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int4x2(123)` will initialize all elements with 123.
        /// - an array value: `int4x2(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int3x4(int4(1), int4(2), int4(3))`.
        /// </param>
        /// <returns>A int4x2 matrix initialized with the specified arguments</returns>
        [KalkExport("int4x2", CategoryMatrixConstructors)]
        public KalkMatrix<int> CreateInt4x2(params object[] arguments) => Int4x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 3 (columns) matrix of int.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int4x3(123)` will initialize all elements with 123.
        /// - an array value: `int4x3(1..12)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int3x4(int4(1), int4(2), int4(3))`.
        /// </param>
        /// <returns>A int4x3 matrix initialized with the specified arguments</returns>
        [KalkExport("int4x3", CategoryMatrixConstructors)]
        public KalkMatrix<int> CreateInt4x3(params object[] arguments) => Int4x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 4 (columns) matrix of int.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `int4x4(123)` will initialize all elements with 123.
        /// - an array value: `int4x4(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `int3x4(int4(1), int4(2), int4(3))`.
        /// </param>
        /// <returns>A int4x4 matrix initialized with the specified arguments</returns>
        [KalkExport("int4x4", CategoryMatrixConstructors)]
        public KalkMatrix<int> CreateInt4x4(params object[] arguments) => Int4x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 2 (columns) matrix of float.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float2x2(123)` will initialize all elements with 123.
        /// - an array value: `float2x2(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float3x4(float4(1), float4(2), float4(3))`.
        /// </param>
        /// <returns>A float2x2 matrix initialized with the specified arguments</returns>
        [KalkExport("float2x2", CategoryMatrixConstructors)]
        public KalkMatrix<float> CreateFloat2x2(params object[] arguments) => Float2x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 3 (columns) matrix of float.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float2x3(123)` will initialize all elements with 123.
        /// - an array value: `float2x3(1..6)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float3x4(float4(1), float4(2), float4(3))`.
        /// </param>
        /// <returns>A float2x3 matrix initialized with the specified arguments</returns>
        [KalkExport("float2x3", CategoryMatrixConstructors)]
        public KalkMatrix<float> CreateFloat2x3(params object[] arguments) => Float2x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 4 (columns) matrix of float.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float2x4(123)` will initialize all elements with 123.
        /// - an array value: `float2x4(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float3x4(float4(1), float4(2), float4(3))`.
        /// </param>
        /// <returns>A float2x4 matrix initialized with the specified arguments</returns>
        [KalkExport("float2x4", CategoryMatrixConstructors)]
        public KalkMatrix<float> CreateFloat2x4(params object[] arguments) => Float2x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 2 (columns) matrix of float.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float3x2(123)` will initialize all elements with 123.
        /// - an array value: `float3x2(1..6)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float3x4(float4(1), float4(2), float4(3))`.
        /// </param>
        /// <returns>A float3x2 matrix initialized with the specified arguments</returns>
        [KalkExport("float3x2", CategoryMatrixConstructors)]
        public KalkMatrix<float> CreateFloat3x2(params object[] arguments) => Float3x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 3 (columns) matrix of float.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float3x3(123)` will initialize all elements with 123.
        /// - an array value: `float3x3(1..9)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float3x4(float4(1), float4(2), float4(3))`.
        /// </param>
        /// <returns>A float3x3 matrix initialized with the specified arguments</returns>
        [KalkExport("float3x3", CategoryMatrixConstructors)]
        public KalkMatrix<float> CreateFloat3x3(params object[] arguments) => Float3x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 4 (columns) matrix of float.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float3x4(123)` will initialize all elements with 123.
        /// - an array value: `float3x4(1..12)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float3x4(float4(1), float4(2), float4(3))`.
        /// </param>
        /// <returns>A float3x4 matrix initialized with the specified arguments</returns>
        [KalkExport("float3x4", CategoryMatrixConstructors)]
        public KalkMatrix<float> CreateFloat3x4(params object[] arguments) => Float3x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 2 (columns) matrix of float.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float4x2(123)` will initialize all elements with 123.
        /// - an array value: `float4x2(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float3x4(float4(1), float4(2), float4(3))`.
        /// </param>
        /// <returns>A float4x2 matrix initialized with the specified arguments</returns>
        [KalkExport("float4x2", CategoryMatrixConstructors)]
        public KalkMatrix<float> CreateFloat4x2(params object[] arguments) => Float4x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 3 (columns) matrix of float.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float4x3(123)` will initialize all elements with 123.
        /// - an array value: `float4x3(1..12)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float3x4(float4(1), float4(2), float4(3))`.
        /// </param>
        /// <returns>A float4x3 matrix initialized with the specified arguments</returns>
        [KalkExport("float4x3", CategoryMatrixConstructors)]
        public KalkMatrix<float> CreateFloat4x3(params object[] arguments) => Float4x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 4 (columns) matrix of float.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `float4x4(123)` will initialize all elements with 123.
        /// - an array value: `float4x4(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `float3x4(float4(1), float4(2), float4(3))`.
        /// </param>
        /// <returns>A float4x4 matrix initialized with the specified arguments</returns>
        [KalkExport("float4x4", CategoryMatrixConstructors)]
        public KalkMatrix<float> CreateFloat4x4(params object[] arguments) => Float4x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 2 (columns) matrix of double.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double2x2(123)` will initialize all elements with 123.
        /// - an array value: `double2x2(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double3x4(double4(1), double4(2), double4(3))`.
        /// </param>
        /// <returns>A double2x2 matrix initialized with the specified arguments</returns>
        [KalkExport("double2x2", CategoryMatrixConstructors)]
        public KalkMatrix<double> CreateDouble2x2(params object[] arguments) => Double2x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 3 (columns) matrix of double.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double2x3(123)` will initialize all elements with 123.
        /// - an array value: `double2x3(1..6)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double3x4(double4(1), double4(2), double4(3))`.
        /// </param>
        /// <returns>A double2x3 matrix initialized with the specified arguments</returns>
        [KalkExport("double2x3", CategoryMatrixConstructors)]
        public KalkMatrix<double> CreateDouble2x3(params object[] arguments) => Double2x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 4 (columns) matrix of double.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double2x4(123)` will initialize all elements with 123.
        /// - an array value: `double2x4(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double3x4(double4(1), double4(2), double4(3))`.
        /// </param>
        /// <returns>A double2x4 matrix initialized with the specified arguments</returns>
        [KalkExport("double2x4", CategoryMatrixConstructors)]
        public KalkMatrix<double> CreateDouble2x4(params object[] arguments) => Double2x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 2 (columns) matrix of double.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double3x2(123)` will initialize all elements with 123.
        /// - an array value: `double3x2(1..6)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double3x4(double4(1), double4(2), double4(3))`.
        /// </param>
        /// <returns>A double3x2 matrix initialized with the specified arguments</returns>
        [KalkExport("double3x2", CategoryMatrixConstructors)]
        public KalkMatrix<double> CreateDouble3x2(params object[] arguments) => Double3x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 3 (columns) matrix of double.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double3x3(123)` will initialize all elements with 123.
        /// - an array value: `double3x3(1..9)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double3x4(double4(1), double4(2), double4(3))`.
        /// </param>
        /// <returns>A double3x3 matrix initialized with the specified arguments</returns>
        [KalkExport("double3x3", CategoryMatrixConstructors)]
        public KalkMatrix<double> CreateDouble3x3(params object[] arguments) => Double3x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 4 (columns) matrix of double.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double3x4(123)` will initialize all elements with 123.
        /// - an array value: `double3x4(1..12)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double3x4(double4(1), double4(2), double4(3))`.
        /// </param>
        /// <returns>A double3x4 matrix initialized with the specified arguments</returns>
        [KalkExport("double3x4", CategoryMatrixConstructors)]
        public KalkMatrix<double> CreateDouble3x4(params object[] arguments) => Double3x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 2 (columns) matrix of double.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double4x2(123)` will initialize all elements with 123.
        /// - an array value: `double4x2(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double3x4(double4(1), double4(2), double4(3))`.
        /// </param>
        /// <returns>A double4x2 matrix initialized with the specified arguments</returns>
        [KalkExport("double4x2", CategoryMatrixConstructors)]
        public KalkMatrix<double> CreateDouble4x2(params object[] arguments) => Double4x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 3 (columns) matrix of double.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double4x3(123)` will initialize all elements with 123.
        /// - an array value: `double4x3(1..12)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double3x4(double4(1), double4(2), double4(3))`.
        /// </param>
        /// <returns>A double4x3 matrix initialized with the specified arguments</returns>
        [KalkExport("double4x3", CategoryMatrixConstructors)]
        public KalkMatrix<double> CreateDouble4x3(params object[] arguments) => Double4x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 4 (columns) matrix of double.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `double4x4(123)` will initialize all elements with 123.
        /// - an array value: `double4x4(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `double3x4(double4(1), double4(2), double4(3))`.
        /// </param>
        /// <returns>A double4x4 matrix initialized with the specified arguments</returns>
        [KalkExport("double4x4", CategoryMatrixConstructors)]
        public KalkMatrix<double> CreateDouble4x4(params object[] arguments) => Double4x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 2 (columns) matrix of half.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half2x2(123)` will initialize all elements with 123.
        /// - an array value: `half2x2(1..4)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half3x4(half4(1), half4(2), half4(3))`.
        /// </param>
        /// <returns>A half2x2 matrix initialized with the specified arguments</returns>
        [KalkExport("half2x2", CategoryMatrixConstructors)]
        public KalkMatrix<KalkHalf> CreateHalf2x2(params object[] arguments) => Half2x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 3 (columns) matrix of half.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half2x3(123)` will initialize all elements with 123.
        /// - an array value: `half2x3(1..6)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half3x4(half4(1), half4(2), half4(3))`.
        /// </param>
        /// <returns>A half2x3 matrix initialized with the specified arguments</returns>
        [KalkExport("half2x3", CategoryMatrixConstructors)]
        public KalkMatrix<KalkHalf> CreateHalf2x3(params object[] arguments) => Half2x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 2 (rows) x 4 (columns) matrix of half.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half2x4(123)` will initialize all elements with 123.
        /// - an array value: `half2x4(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half3x4(half4(1), half4(2), half4(3))`.
        /// </param>
        /// <returns>A half2x4 matrix initialized with the specified arguments</returns>
        [KalkExport("half2x4", CategoryMatrixConstructors)]
        public KalkMatrix<KalkHalf> CreateHalf2x4(params object[] arguments) => Half2x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 2 (columns) matrix of half.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half3x2(123)` will initialize all elements with 123.
        /// - an array value: `half3x2(1..6)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half3x4(half4(1), half4(2), half4(3))`.
        /// </param>
        /// <returns>A half3x2 matrix initialized with the specified arguments</returns>
        [KalkExport("half3x2", CategoryMatrixConstructors)]
        public KalkMatrix<KalkHalf> CreateHalf3x2(params object[] arguments) => Half3x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 3 (columns) matrix of half.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half3x3(123)` will initialize all elements with 123.
        /// - an array value: `half3x3(1..9)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half3x4(half4(1), half4(2), half4(3))`.
        /// </param>
        /// <returns>A half3x3 matrix initialized with the specified arguments</returns>
        [KalkExport("half3x3", CategoryMatrixConstructors)]
        public KalkMatrix<KalkHalf> CreateHalf3x3(params object[] arguments) => Half3x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 3 (rows) x 4 (columns) matrix of half.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half3x4(123)` will initialize all elements with 123.
        /// - an array value: `half3x4(1..12)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half3x4(half4(1), half4(2), half4(3))`.
        /// </param>
        /// <returns>A half3x4 matrix initialized with the specified arguments</returns>
        [KalkExport("half3x4", CategoryMatrixConstructors)]
        public KalkMatrix<KalkHalf> CreateHalf3x4(params object[] arguments) => Half3x4Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 2 (columns) matrix of half.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half4x2(123)` will initialize all elements with 123.
        /// - an array value: `half4x2(1..8)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half3x4(half4(1), half4(2), half4(3))`.
        /// </param>
        /// <returns>A half4x2 matrix initialized with the specified arguments</returns>
        [KalkExport("half4x2", CategoryMatrixConstructors)]
        public KalkMatrix<KalkHalf> CreateHalf4x2(params object[] arguments) => Half4x2Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 3 (columns) matrix of half.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half4x3(123)` will initialize all elements with 123.
        /// - an array value: `half4x3(1..12)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half3x4(half4(1), half4(2), half4(3))`.
        /// </param>
        /// <returns>A half4x3 matrix initialized with the specified arguments</returns>
        [KalkExport("half4x3", CategoryMatrixConstructors)]
        public KalkMatrix<KalkHalf> CreateHalf4x3(params object[] arguments) => Half4x3Constructor.Invoke(Engine, arguments);
        /// <summary>Creates a 4 (rows) x 4 (columns) matrix of half.</summary>
        /// <param name="arguments">The matrix item values. The total number of values must equal the total dimension of the matrix. The arguments can be:
        /// - No values: All items of the vector are initialized with the value 0.
        /// - a single value: `half4x4(123)` will initialize all elements with 123.
        /// - an array value: `half4x4(1..16)` will initialize all elements with the array elements. The size of the array must match the size of the vector.
        /// - A combination of vectors/single values (e.g `half3x4(half4(1), half4(2), half4(3))`.
        /// </param>
        /// <returns>A half4x4 matrix initialized with the specified arguments</returns>
        [KalkExport("half4x4", CategoryMatrixConstructors)]
        public KalkMatrix<KalkHalf> CreateHalf4x4(params object[] arguments) => Half4x4Constructor.Invoke(Engine, arguments);
    }
}
